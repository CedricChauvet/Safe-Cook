{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linkTo = exports.setParams = exports.canDismiss = exports.canGoBack = exports.goBack = exports.dismissAll = exports.replace = exports.dismissTo = exports.dismiss = exports.push = exports.reload = exports.navigate = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst dom_1 = require(\"expo/dom\");\nconst Linking = __importStar(require(\"expo-linking\"));\nconst non_secure_1 = require(\"nanoid/non-secure\");\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst href_1 = require(\"../link/href\");\nconst useDomComponentNavigation_1 = require(\"../link/useDomComponentNavigation\");\nconst matchers_1 = require(\"../matchers\");\nconst url_1 = require(\"../utils/url\");\nfunction assertIsReady(store) {\n  if (!store.navigationRef.isReady()) {\n    throw new Error('Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.');\n  }\n}\nfunction navigate(url, options) {\n  return this.linkTo((0, href_1.resolveHref)(url), Object.assign({}, options, {\n    event: 'NAVIGATE'\n  }));\n}\nexports.navigate = navigate;\nfunction reload() {\n  throw new Error('The reload method is not implemented in the client-side router yet.');\n}\nexports.reload = reload;\nfunction push(url, options) {\n  return this.linkTo((0, href_1.resolveHref)(url), Object.assign({}, options, {\n    event: 'PUSH'\n  }));\n}\nexports.push = push;\nfunction dismiss(count) {\n  if ((0, useDomComponentNavigation_1.emitDomDismiss)(count)) {\n    return;\n  }\n  this.navigationRef?.dispatch(native_1.StackActions.pop(count));\n}\nexports.dismiss = dismiss;\nfunction dismissTo(href, options) {\n  return this.linkTo((0, href_1.resolveHref)(href), Object.assign({}, options, {\n    event: 'POP_TO'\n  }));\n}\nexports.dismissTo = dismissTo;\nfunction replace(url, options) {\n  return this.linkTo((0, href_1.resolveHref)(url), Object.assign({}, options, {\n    event: 'REPLACE'\n  }));\n}\nexports.replace = replace;\nfunction dismissAll() {\n  if ((0, useDomComponentNavigation_1.emitDomDismissAll)()) {\n    return;\n  }\n  this.navigationRef?.dispatch(native_1.StackActions.popToTop());\n}\nexports.dismissAll = dismissAll;\nfunction goBack() {\n  if ((0, useDomComponentNavigation_1.emitDomGoBack)()) {\n    return;\n  }\n  assertIsReady(this);\n  this.navigationRef?.current?.goBack();\n}\nexports.goBack = goBack;\nfunction canGoBack() {\n  if (dom_1.IS_DOM) {\n    throw new Error('canGoBack imperative method is not supported. Pass the property to the DOM component instead.');\n  }\n  if (!this.navigationRef.isReady()) {\n    return false;\n  }\n  return this.navigationRef?.current?.canGoBack() ?? false;\n}\nexports.canGoBack = canGoBack;\nfunction canDismiss() {\n  if (dom_1.IS_DOM) {\n    throw new Error('canDismiss imperative method is not supported. Pass the property to the DOM component instead.');\n  }\n  let state = this.rootState;\n  while (state) {\n    if (state.type === 'stack' && state.routes.length > 1) {\n      return true;\n    }\n    if (state.index === undefined) return false;\n    state = state.routes?.[state.index]?.state;\n  }\n  return false;\n}\nexports.canDismiss = canDismiss;\nfunction setParams(params = {}) {\n  if ((0, useDomComponentNavigation_1.emitDomSetParams)(params)) {\n    return;\n  }\n  assertIsReady(this);\n  return (this.navigationRef?.current?.setParams)(params);\n}\nexports.setParams = setParams;\nfunction linkTo(href, {\n  event,\n  relativeToDirectory,\n  withAnchor\n} = {}) {\n  if ((0, useDomComponentNavigation_1.emitDomLinkEvent)(href, {\n    event,\n    relativeToDirectory,\n    withAnchor\n  })) {\n    return;\n  }\n  if ((0, url_1.shouldLinkExternally)(href)) {\n    if (href.startsWith('//') && react_native_1.Platform.OS !== 'web') {\n      href = `https:${href}`;\n    }\n    Linking.openURL(href);\n    return;\n  }\n  assertIsReady(this);\n  const navigationRef = this.navigationRef.current;\n  if (navigationRef == null) {\n    throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n  }\n  if (!this.linking) {\n    throw new Error('Attempted to link to route when no routes are present');\n  }\n  if (href === '..' || href === '../') {\n    navigationRef.goBack();\n    return;\n  }\n  const rootState = navigationRef.getRootState();\n  href = (0, href_1.resolveHrefStringWithSegments)(href, this.routeInfo, relativeToDirectory);\n  const state = this.linking.getStateFromPath(href, this.linking.config);\n  if (!state || state.routes.length === 0) {\n    console.error('Could not generate a valid navigation state for the given path: ' + href);\n    return;\n  }\n  return navigationRef.dispatch(getNavigateAction(state, rootState, event, withAnchor));\n}\nexports.linkTo = linkTo;\nfunction getNavigateAction(actionState, navigationState, type = 'NAVIGATE', withAnchor) {\n  let actionStateRoute;\n  while (actionState && navigationState) {\n    const stateRoute = navigationState.routes[navigationState.index];\n    actionStateRoute = actionState.routes[actionState.routes.length - 1];\n    const childState = actionStateRoute.state;\n    const nextNavigationState = stateRoute.state;\n    const dynamicName = (0, matchers_1.matchDynamicName)(actionStateRoute.name);\n    const didActionAndCurrentStateDiverge = actionStateRoute.name !== stateRoute.name || !childState || !nextNavigationState || dynamicName && actionStateRoute.params?.[dynamicName] !== stateRoute.params?.[dynamicName];\n    if (didActionAndCurrentStateDiverge) {\n      break;\n    }\n    actionState = childState;\n    navigationState = nextNavigationState;\n  }\n  const rootPayload = {\n    params: {}\n  };\n  let payload = rootPayload;\n  let params = payload.params;\n  while (actionStateRoute) {\n    Object.assign(params, Object.assign({}, payload.params, actionStateRoute.params));\n    payload.screen = actionStateRoute.name;\n    payload.params = Object.assign({}, params);\n    delete payload.params['screen'];\n    payload = payload.params;\n    params = payload;\n    actionStateRoute = actionStateRoute.state?.routes[actionStateRoute.state?.routes.length - 1];\n  }\n  if (type === 'PUSH') {\n    type = 'NAVIGATE';\n    if (navigationState.type === 'stack') {\n      rootPayload.params.__EXPO_ROUTER_key = `${rootPayload.name}-${(0, non_secure_1.nanoid)()}`;\n    }\n  }\n  if (navigationState.type === 'expo-tab') {\n    type = 'JUMP_TO';\n  }\n  if (type === 'REPLACE' && (navigationState.type === 'tab' || navigationState.type === 'drawer')) {\n    type = 'JUMP_TO';\n  }\n  if (withAnchor !== undefined) {\n    if (rootPayload.params.initial) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(`The parameter 'initial' is a reserved parameter name in React Navigation`);\n      }\n    }\n    rootPayload.params.initial = !withAnchor;\n  }\n  return {\n    type,\n    target: navigationState.key,\n    payload: {\n      name: rootPayload.screen,\n      params: rootPayload.params\n    }\n  };\n}","map":{"version":3,"names":["native_1","require","dom_1","Linking","__importStar","non_secure_1","react_native_1","href_1","useDomComponentNavigation_1","matchers_1","url_1","assertIsReady","store","navigationRef","isReady","Error","navigate","url","options","linkTo","resolveHref","Object","assign","event","exports","reload","push","dismiss","count","emitDomDismiss","dispatch","StackActions","pop","dismissTo","href","replace","dismissAll","emitDomDismissAll","popToTop","goBack","emitDomGoBack","current","canGoBack","IS_DOM","canDismiss","state","rootState","type","routes","length","index","undefined","setParams","params","emitDomSetParams","relativeToDirectory","withAnchor","emitDomLinkEvent","shouldLinkExternally","startsWith","Platform","OS","openURL","linking","getRootState","resolveHrefStringWithSegments","routeInfo","getStateFromPath","config","console","error","getNavigateAction","actionState","navigationState","actionStateRoute","stateRoute","childState","nextNavigationState","dynamicName","matchDynamicName","name","didActionAndCurrentStateDiverge","rootPayload","payload","screen","__EXPO_ROUTER_key","nanoid","initial","process","env","NODE_ENV","warn","target","key"],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\expo-router\\src\\global-state\\routing.ts"],"sourcesContent":["import { StackActions, type NavigationState, PartialRoute } from '@react-navigation/native';\nimport { IS_DOM } from 'expo/dom';\nimport * as Linking from 'expo-linking';\nimport { nanoid } from 'nanoid/non-secure';\nimport { Platform } from 'react-native';\n\nimport { type RouterStore } from './router-store';\nimport { ResultState } from '../fork/getStateFromPath';\nimport { resolveHref, resolveHrefStringWithSegments } from '../link/href';\nimport {\n  emitDomDismiss,\n  emitDomDismissAll,\n  emitDomGoBack,\n  emitDomLinkEvent,\n  emitDomSetParams,\n} from '../link/useDomComponentNavigation';\nimport { matchDynamicName } from '../matchers';\nimport { Href } from '../types';\nimport { shouldLinkExternally } from '../utils/url';\n\nfunction assertIsReady(store: RouterStore) {\n  if (!store.navigationRef.isReady()) {\n    throw new Error(\n      'Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.'\n    );\n  }\n}\n\nexport type NavigationOptions = Omit<LinkToOptions, 'event'>;\n\nexport function navigate(this: RouterStore, url: Href, options?: NavigationOptions) {\n  return this.linkTo(resolveHref(url), { ...options, event: 'NAVIGATE' });\n}\n\nexport function reload(this: RouterStore) {\n  // TODO(EvanBacon): add `reload` support.\n  throw new Error('The reload method is not implemented in the client-side router yet.');\n}\n\nexport function push(this: RouterStore, url: Href, options?: NavigationOptions) {\n  return this.linkTo(resolveHref(url), { ...options, event: 'PUSH' });\n}\n\nexport function dismiss(this: RouterStore, count?: number) {\n  if (emitDomDismiss(count)) {\n    return;\n  }\n  this.navigationRef?.dispatch(StackActions.pop(count));\n}\n\nexport function dismissTo(this: RouterStore, href: Href, options?: NavigationOptions) {\n  return this.linkTo(resolveHref(href), { ...options, event: 'POP_TO' });\n}\n\nexport function replace(this: RouterStore, url: Href, options?: NavigationOptions) {\n  return this.linkTo(resolveHref(url), { ...options, event: 'REPLACE' });\n}\n\nexport function dismissAll(this: RouterStore) {\n  if (emitDomDismissAll()) {\n    return;\n  }\n  this.navigationRef?.dispatch(StackActions.popToTop());\n}\n\nexport function goBack(this: RouterStore) {\n  if (emitDomGoBack()) {\n    return;\n  }\n  assertIsReady(this);\n  this.navigationRef?.current?.goBack();\n}\n\nexport function canGoBack(this: RouterStore): boolean {\n  if (IS_DOM) {\n    throw new Error(\n      'canGoBack imperative method is not supported. Pass the property to the DOM component instead.'\n    );\n  }\n  // Return a default value here if the navigation hasn't mounted yet.\n  // This can happen if the user calls `canGoBack` from the Root Layout route\n  // before mounting a navigator. This behavior exists due to React Navigation being dynamically\n  // constructed at runtime. We can get rid of this in the future if we use\n  // the static configuration internally.\n  if (!this.navigationRef.isReady()) {\n    return false;\n  }\n  return this.navigationRef?.current?.canGoBack() ?? false;\n}\n\nexport function canDismiss(this: RouterStore): boolean {\n  if (IS_DOM) {\n    throw new Error(\n      'canDismiss imperative method is not supported. Pass the property to the DOM component instead.'\n    );\n  }\n  let state = this.rootState;\n\n  // Keep traversing down the state tree until we find a stack navigator that we can pop\n  while (state) {\n    if (state.type === 'stack' && state.routes.length > 1) {\n      return true;\n    }\n    if (state.index === undefined) return false;\n\n    state = state.routes?.[state.index]?.state as any;\n  }\n\n  return false;\n}\n\nexport function setParams(\n  this: RouterStore,\n  params: Record<string, string | number | (string | number)[]> = {}\n) {\n  if (emitDomSetParams(params)) {\n    return;\n  }\n  assertIsReady(this);\n  return (this.navigationRef?.current?.setParams as any)(params);\n}\n\nexport type LinkToOptions = {\n  event?: string;\n\n  /**\n   * Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document.\n   * @see: [MDN's documentation on Resolving relative references to a URL](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   *\n   */\n  withAnchor?: boolean;\n};\n\nexport function linkTo(\n  this: RouterStore,\n  href: string,\n  { event, relativeToDirectory, withAnchor }: LinkToOptions = {}\n) {\n  if (emitDomLinkEvent(href, { event, relativeToDirectory, withAnchor })) {\n    return;\n  }\n\n  if (shouldLinkExternally(href)) {\n    if (href.startsWith('//') && Platform.OS !== 'web') {\n      href = `https:${href}`;\n    }\n\n    Linking.openURL(href);\n    return;\n  }\n\n  assertIsReady(this);\n  const navigationRef = this.navigationRef.current;\n\n  if (navigationRef == null) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  if (!this.linking) {\n    throw new Error('Attempted to link to route when no routes are present');\n  }\n\n  if (href === '..' || href === '../') {\n    navigationRef.goBack();\n    return;\n  }\n\n  const rootState = navigationRef.getRootState();\n\n  href = resolveHrefStringWithSegments(href, this.routeInfo, relativeToDirectory);\n\n  const state = this.linking.getStateFromPath!(href, this.linking.config);\n\n  if (!state || state.routes.length === 0) {\n    console.error('Could not generate a valid navigation state for the given path: ' + href);\n    return;\n  }\n\n  return navigationRef.dispatch(getNavigateAction(state, rootState, event, withAnchor));\n}\n\nfunction getNavigateAction(\n  actionState: ResultState,\n  navigationState: NavigationState,\n  type = 'NAVIGATE',\n  withAnchor?: boolean\n) {\n  /**\n   * We need to find the deepest navigator where the action and current state diverge, If they do not diverge, the\n   * lowest navigator is the target.\n   *\n   * By default React Navigation will target the current navigator, but this doesn't work for all actions\n   * For example:\n   *  - /deeply/nested/route -> /top-level-route the target needs to be the top-level navigator\n   *  - /stack/nestedStack/page -> /stack1/nestedStack/other-page needs to target the nestedStack navigator\n   *\n   * This matching needs to done by comparing the route names and the dynamic path, for example\n   * - /1/page -> /2/anotherPage needs to target the /[id] navigator\n   *\n   * Other parameters such as search params and hash are not evaluated.\n   */\n  let actionStateRoute: PartialRoute<any> | undefined;\n\n  // Traverse the state tree comparing the current state and the action state until we find where they diverge\n  while (actionState && navigationState) {\n    const stateRoute = navigationState.routes[navigationState.index];\n\n    actionStateRoute = actionState.routes[actionState.routes.length - 1];\n\n    const childState = actionStateRoute.state;\n    const nextNavigationState = stateRoute.state;\n\n    const dynamicName = matchDynamicName(actionStateRoute.name);\n\n    const didActionAndCurrentStateDiverge =\n      actionStateRoute.name !== stateRoute.name ||\n      !childState ||\n      !nextNavigationState ||\n      (dynamicName && actionStateRoute.params?.[dynamicName] !== stateRoute.params?.[dynamicName]);\n\n    if (didActionAndCurrentStateDiverge) {\n      break;\n    }\n\n    actionState = childState;\n    navigationState = nextNavigationState as NavigationState;\n  }\n\n  /*\n   * We found the target navigator, but the payload is in the incorrect format\n   * We need to convert the action state to a payload that can be dispatched\n   */\n  const rootPayload: Record<string, any> = { params: {} };\n  let payload = rootPayload;\n  let params = payload.params;\n\n  // The root level of payload is a bit weird, its params are in the child object\n  while (actionStateRoute) {\n    Object.assign(params, { ...payload.params, ...actionStateRoute.params });\n    // Assign the screen name to the payload\n    payload.screen = actionStateRoute.name;\n    // Merge the params, ensuring that we create a new object\n    payload.params = { ...params };\n    // Params don't include the screen, thats a separate attribute\n    delete payload.params['screen'];\n\n    // Continue down the payload tree\n    // Initially these values are separate, but React Nav merges them after the first layer\n    payload = payload.params;\n    params = payload;\n\n    actionStateRoute = actionStateRoute.state?.routes[actionStateRoute.state?.routes.length - 1];\n  }\n\n  // Expo Router uses only three actions, but these don't directly translate to all navigator actions\n  if (type === 'PUSH') {\n    // Only stack navigators have a push action, and even then we want to use NAVIGATE (see below)\n    type = 'NAVIGATE';\n\n    /*\n     * The StackAction.PUSH does not work correctly with Expo Router.\n     *\n     * Expo Router provides a getId() function for every route, altering how React Navigation handles stack routing.\n     * Ordinarily, PUSH always adds a new screen to the stack. However, with getId() present, it navigates to the screen with the matching ID instead (by moving the screen to the top of the stack)\n     * When you try and push to a screen with the same ID, no navigation will occur\n     * Refer to: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L279-L290\n     *\n     * Expo Router needs to retain the default behavior of PUSH, consistently adding new screens to the stack, even if their IDs are identical.\n     *\n     * To resolve this issue, we switch to using a NAVIGATE action with a new key. In the navigate action, screens are matched by either key or getId() function.\n     * By generating a unique new key, we ensure that the screen is always pushed onto the stack.\n     *\n     */\n    if (navigationState.type === 'stack') {\n      rootPayload.params.__EXPO_ROUTER_key = `${rootPayload.name}-${nanoid()}`; // @see https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L406-L407\n    }\n  }\n\n  if (navigationState.type === 'expo-tab') {\n    type = 'JUMP_TO';\n  }\n\n  if (type === 'REPLACE' && (navigationState.type === 'tab' || navigationState.type === 'drawer')) {\n    type = 'JUMP_TO';\n  }\n\n  if (withAnchor !== undefined) {\n    if (rootPayload.params.initial) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(`The parameter 'initial' is a reserved parameter name in React Navigation`);\n      }\n    }\n    /*\n     * The logic for initial can seen backwards depending on your perspective\n     *   True: The initialRouteName is not loaded. The incoming screen is the initial screen (default)\n     *   False: The initialRouteName is loaded. THe incoming screen is placed after the initialRouteName\n     *\n     * withAnchor flips the perspective.\n     *   True: You want the initialRouteName to load.\n     *   False: You do not want the initialRouteName to load.\n     */\n    rootPayload.params.initial = !withAnchor;\n  }\n\n  return {\n    type,\n    target: navigationState.key,\n    payload: {\n      // key: rootPayload.key,\n      name: rootPayload.screen,\n      params: rootPayload.params,\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}