{"ast":null,"code":"const disableReactNativeMissingModuleHandling = !__DEV__ && (false || false);\nglobalThis.__webpack_chunk_load__ = id => {\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\n};\nglobalThis.__webpack_require__ = id => {\n  const original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    ErrorUtils.reportFatalError = err => {\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    if (disableReactNativeMissingModuleHandling) {\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};","map":{"version":3,"names":["disableReactNativeMissingModuleHandling","__DEV__","globalThis","__webpack_chunk_load__","id","global","__METRO_GLOBAL_PREFIX__","__webpack_require__","original","ErrorUtils","reportFatalError","err"],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/@expo/metro-runtime/rsc/runtime.js"],"sourcesContent":["/**\r\n * Copyright Â© 2024 650 Industries.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n// React Native's error handling is full of bugs which cause the app to crash in production.\r\n// We'll disable their handling in production native builds to ensure missing modules are shown to the user.\r\nconst disableReactNativeMissingModuleHandling =\r\n  !__DEV__ && (process.env.EXPO_OS !== 'web' || typeof window === 'undefined');\r\n\r\nglobalThis.__webpack_chunk_load__ = (id) => {\r\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\r\n};\r\n\r\nglobalThis.__webpack_require__ = (id) => {\r\n  // This logic can be tested by running a production iOS build without virtual client boundaries. This will result in all split chunks being missing and\r\n  // errors being thrown on RSC load.\r\n\r\n  const original = ErrorUtils.reportFatalError;\r\n  if (disableReactNativeMissingModuleHandling) {\r\n    ErrorUtils.reportFatalError = (err) => {\r\n      // Throw the error so the __r function exits as expected. The error will then be caught by the nearest error boundary.\r\n      throw err;\r\n    };\r\n  }\r\n  try {\r\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\r\n  } finally {\r\n    // Restore the original error handling.\r\n    if (disableReactNativeMissingModuleHandling) {\r\n      ErrorUtils.reportFatalError = original;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AASA,MAAMA,uCAAuC,GAC3C,CAACC,OAAO,KAAK,cAA8D,CAAC;AAE9EC,UAAU,CAACC,sBAAsB,GAAIC,EAAE,IAAK;EAC1C,OAAOC,MAAM,CAAC,GAAGC,uBAAuB,mBAAmB,CAAC,CAACF,EAAE,CAAC;AAClE,CAAC;AAEDF,UAAU,CAACK,mBAAmB,GAAIH,EAAE,IAAK;EAIvC,MAAMI,QAAQ,GAAGC,UAAU,CAACC,gBAAgB;EAC5C,IAAIV,uCAAuC,EAAE;IAC3CS,UAAU,CAACC,gBAAgB,GAAIC,GAAG,IAAK;MAErC,MAAMA,GAAG;IACX,CAAC;EACH;EACA,IAAI;IACF,OAAON,MAAM,CAAC,GAAGC,uBAAuB,KAAK,CAAC,CAACF,EAAE,CAAC;EACpD,CAAC,SAAS;IAER,IAAIJ,uCAAuC,EAAE;MAC3CS,UAAU,CAACC,gBAAgB,GAAGF,QAAQ;IACxC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}