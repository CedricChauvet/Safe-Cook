{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"children\", \"layout\", \"screenOptions\", \"screenLayout\", \"screenListeners\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNavigationBuilder = useNavigationBuilder;\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _deepFreeze = require(\"./deepFreeze.js\");\nvar _Group = require(\"./Group.js\");\nvar _isArrayEqual = require(\"./isArrayEqual.js\");\nvar _isRecordEqual = require(\"./isRecordEqual.js\");\nvar _NavigationHelpersContext = require(\"./NavigationHelpersContext.js\");\nvar _NavigationRouteContext = require(\"./NavigationRouteContext.js\");\nvar _NavigationStateContext = require(\"./NavigationStateContext.js\");\nvar _PreventRemoveProvider = require(\"./PreventRemoveProvider.js\");\nvar _Screen = require(\"./Screen.js\");\nvar _types = require(\"./types.js\");\nvar _useChildListeners = require(\"./useChildListeners.js\");\nvar _useComponent = require(\"./useComponent.js\");\nvar _useCurrentRender = require(\"./useCurrentRender.js\");\nvar _useDescriptors = require(\"./useDescriptors.js\");\nvar _useEventEmitter = require(\"./useEventEmitter.js\");\nvar _useFocusedListenersChildrenAdapter = require(\"./useFocusedListenersChildrenAdapter.js\");\nvar _useFocusEvents = require(\"./useFocusEvents.js\");\nvar _useIsomorphicLayoutEffect = require(\"./useIsomorphicLayoutEffect\");\nvar _useKeyedChildListeners = require(\"./useKeyedChildListeners.js\");\nvar _useLazyValue = require(\"./useLazyValue.js\");\nvar _useNavigationHelpers = require(\"./useNavigationHelpers.js\");\nvar _useOnAction = require(\"./useOnAction.js\");\nvar _useOnGetState = require(\"./useOnGetState.js\");\nvar _useOnRouteFocus = require(\"./useOnRouteFocus.js\");\nvar _useRegisterNavigator = require(\"./useRegisterNavigator.js\");\nvar _useScheduleUpdate = require(\"./useScheduleUpdate.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\n_types.PrivateValueStore;\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions, groupLayout) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions], typeof child.props.screenLayout === 'function' ? child.props.screenLayout : groupLayout));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : child.type?.name}'${child.props != null && typeof child.props === 'object' && 'name' in child.props && child.props?.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  const navigatorKey = (0, _useRegisterNavigator.useRegisterNavigator)();\n  const route = React.useContext(_NavigationRouteContext.NavigationRouteContext);\n  const {\n      children,\n      layout,\n      screenOptions,\n      screenLayout,\n      screenListeners\n    } = options,\n    rest = _objectWithoutPropertiesLoose(options, _excluded);\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const router = (0, _useLazyValue.useLazyValue)(() => {\n    if (rest.initialRouteName != null && routeConfigs.every(config => config.props.name !== rest.initialRouteName)) {\n      throw new Error(`Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`);\n    }\n    return createRouter(rest);\n  });\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key ?? '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(_NavigationStateContext.NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const setState = (0, _useLatestCallback.default)(state => {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  });\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = route?.params?.state == null && route?.params?.initial !== false && route?.params?.screen === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? Object.assign({}, initialParams, initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n    if ((currentState === undefined || !isStateValid(currentState)) && route?.params?.state == null && !(typeof route?.params?.screen === 'string' && route?.params?.initial !== false)) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      let stateFromParams;\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (typeof route?.params?.screen === 'string' && route?.params?.initial !== false) {\n        stateFromParams = {\n          index: 0,\n          routes: [{\n            name: route.params.screen,\n            params: route.params.params,\n            path: route.params.path\n          }]\n        };\n      }\n      return [router.getRehydratedState(stateFromParams ?? currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state = isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n  if (!(0, _isArrayEqual.isArrayEqual)(state.routeNames, routeNames) || !(0, _isRecordEqual.isRecordEqual)(routeKeyList, previousRouteKeyList)) {\n    const navigatorStateForNextRouteNamesChange = options.UNSTABLE_getStateForRouteNamesChange?.(state);\n    nextState = navigatorStateForNextRouteNamesChange ? router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => name in previousRouteKeyList && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n  const previousNestedParamsRef = React.useRef(route?.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n  const shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.useScheduleUpdate)(() => {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(() => {\n    stateCleanedUp.current = false;\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return () => {\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n  }, []);\n  const stateRef = React.useRef(state);\n  stateRef.current = state;\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(() => {\n    stateRef.current = null;\n  });\n  const getState = (0, _useLatestCallback.default)(() => {\n    const currentState = getCurrentState();\n    return (0, _deepFreeze.deepFreeze)(isStateInitialized(currentState) ? currentState : initializedState);\n  });\n  const emitter = (0, _useEventEmitter.useEventEmitter)(e => {\n    const routeNames = [];\n    let route;\n    if (e.target) {\n      route = state.routes.find(route => route.key === e.target);\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => route?.name === name));\n    }\n    if (route == null) {\n      return;\n    }\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat(...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map?.[type]) : undefined;\n    })).filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener?.(e));\n  });\n  (0, _useFocusEvents.useFocusEvents)({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = (0, _useChildListeners.useChildListeners)();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = (0, _useKeyedChildListeners.useKeyedChildListeners)();\n  const onAction = (0, _useOnAction.useOnAction)({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = (0, _useOnRouteFocus.useOnRouteFocus)({\n    router,\n    key: route?.key,\n    getState,\n    setState\n  });\n  const navigation = (0, _useNavigationHelpers.useNavigationHelpers)({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n    stateRef\n  });\n  (0, _useFocusedListenersChildrenAdapter.useFocusedListenersChildrenAdapter)({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.useOnGetState)({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const {\n    describe,\n    descriptors\n  } = (0, _useDescriptors.useDescriptors)({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter\n  });\n  (0, _useCurrentRender.useCurrentRender)({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = (0, _useComponent.useComponent)(children => {\n    const element = layout != null ? layout({\n      state,\n      descriptors,\n      navigation,\n      children\n    }) : children;\n    return (0, _jsxRuntime.jsx)(_NavigationHelpersContext.NavigationHelpersContext.Provider, {\n      value: navigation,\n      children: (0, _jsxRuntime.jsx)(_PreventRemoveProvider.PreventRemoveProvider, {\n        children: element\n      })\n    });\n  });\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent\n  };\n}","map":{"version":3,"names":["_routers","require","React","_interopRequireWildcard","_reactIs","_useLatestCallback","_interopRequireDefault","_deepFreeze","_Group","_isArrayEqual","_isRecordEqual","_NavigationHelpersContext","_NavigationRouteContext","_NavigationStateContext","_PreventRemoveProvider","_Screen","_types","_useChildListeners","_useComponent","_useCurrentRender","_useDescriptors","_useEventEmitter","_useFocusedListenersChildrenAdapter","_useFocusEvents","_useIsomorphicLayoutEffect","_useKeyedChildListeners","_useLazyValue","_useNavigationHelpers","_useOnAction","_useOnGetState","_useOnRouteFocus","_useRegisterNavigator","_useScheduleUpdate","_jsxRuntime","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","groupLayout","configs","Children","toArray","reduce","acc","child","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","layout","Fragment","Group","screenOptions","screenLayout","String","process","env","NODE_ENV","forEach","config","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","_objectWithoutPropertiesLoose","_excluded","routeConfigs","router","useLazyValue","initialRouteName","every","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","assign","getId","length","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","NavigationStateContext","stateCleanedUp","useRef","current","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","params","initial","screen","getInitialState","stateFromParams","index","routes","path","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","navigatorStateForNextRouteNamesChange","UNSTABLE_getStateForRouteNamesChange","getStateForRouteNamesChange","routeKeyChanges","filter","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","stateRef","useIsomorphicLayoutEffect","deepFreeze","emitter","useEventEmitter","target","find","navigation","descriptors","listeners","concat","cb","self","lastIndexOf","listener","useFocusEvents","emit","data","childListeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","describe","useDescriptors","useCurrentRender","NavigationContent","useComponent","element","jsx","NavigationHelpersContext","Provider","value","PreventRemoveProvider"],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\@react-navigation\\core\\src\\useNavigationBuilder.tsx"],"sourcesContent":["import {\r\n  CommonActions,\r\n  type DefaultRouterOptions,\r\n  type NavigationAction,\r\n  type NavigationState,\r\n  type ParamListBase,\r\n  type PartialState,\r\n  type Route,\r\n  type Router,\r\n  type RouterConfigOptions,\r\n  type RouterFactory,\r\n} from '@react-navigation/routers';\r\nimport * as React from 'react';\r\nimport { isValidElementType } from 'react-is';\r\nimport useLatestCallback from 'use-latest-callback';\r\n\r\nimport { deepFreeze } from './deepFreeze';\r\nimport { Group } from './Group';\r\nimport { isArrayEqual } from './isArrayEqual';\r\nimport { isRecordEqual } from './isRecordEqual';\r\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\r\nimport { NavigationRouteContext } from './NavigationRouteContext';\r\nimport { NavigationStateContext } from './NavigationStateContext';\r\nimport { PreventRemoveProvider } from './PreventRemoveProvider';\r\nimport { Screen } from './Screen';\r\nimport {\r\n  type DefaultNavigatorOptions,\r\n  type EventMapBase,\r\n  type EventMapCore,\r\n  type NavigatorScreenParams,\r\n  PrivateValueStore,\r\n  type RouteConfig,\r\n} from './types';\r\nimport { useChildListeners } from './useChildListeners';\r\nimport { useComponent } from './useComponent';\r\nimport { useCurrentRender } from './useCurrentRender';\r\nimport { type ScreenConfigWithParent, useDescriptors } from './useDescriptors';\r\nimport { useEventEmitter } from './useEventEmitter';\r\nimport { useFocusedListenersChildrenAdapter } from './useFocusedListenersChildrenAdapter';\r\nimport { useFocusEvents } from './useFocusEvents';\r\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\r\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\r\nimport { useLazyValue } from './useLazyValue';\r\nimport { useNavigationHelpers } from './useNavigationHelpers';\r\nimport { useOnAction } from './useOnAction';\r\nimport { useOnGetState } from './useOnGetState';\r\nimport { useOnRouteFocus } from './useOnRouteFocus';\r\nimport { useRegisterNavigator } from './useRegisterNavigator';\r\nimport { useScheduleUpdate } from './useScheduleUpdate';\r\n\r\n// This is to make TypeScript compiler happy\r\nPrivateValueStore;\r\n\r\ntype NavigatorRoute = {\r\n  key: string;\r\n  params?: NavigatorScreenParams<ParamListBase>;\r\n};\r\n\r\nconst isValidKey = (key: unknown) =>\r\n  key === undefined || (typeof key === 'string' && key !== '');\r\n\r\n/**\r\n * Extract route config object from React children elements.\r\n *\r\n * @param children React Elements to extract the config from.\r\n */\r\nconst getRouteConfigsFromChildren = <\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends EventMapBase,\r\n>(\r\n  children: React.ReactNode,\r\n  groupKey?: string,\r\n  groupOptions?: ScreenConfigWithParent<\r\n    State,\r\n    ScreenOptions,\r\n    EventMap\r\n  >['options'],\r\n  groupLayout?: ScreenConfigWithParent<State, ScreenOptions, EventMap>['layout']\r\n) => {\r\n  const configs = React.Children.toArray(children).reduce<\r\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\r\n  >((acc, child) => {\r\n    if (React.isValidElement(child)) {\r\n      if (child.type === Screen) {\r\n        // We can only extract the config from `Screen` elements\r\n        // If something else was rendered, it's probably a bug\r\n\r\n        if (!isValidKey(child.props.navigationKey)) {\r\n          throw new Error(\r\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\r\n              child.props.navigationKey\r\n            )}) for the screen '${\r\n              child.props.name\r\n            }'. It must be a non-empty string or 'undefined'.`\r\n          );\r\n        }\r\n\r\n        acc.push({\r\n          keys: [groupKey, child.props.navigationKey],\r\n          options: groupOptions,\r\n          layout: groupLayout,\r\n          props: child.props as RouteConfig<\r\n            ParamListBase,\r\n            string,\r\n            State,\r\n            ScreenOptions,\r\n            EventMap,\r\n            unknown\r\n          >,\r\n        });\r\n\r\n        return acc;\r\n      }\r\n\r\n      if (child.type === React.Fragment || child.type === Group) {\r\n        if (!isValidKey(child.props.navigationKey)) {\r\n          throw new Error(\r\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\r\n              child.props.navigationKey\r\n            )}) for the group. It must be a non-empty string or 'undefined'.`\r\n          );\r\n        }\r\n\r\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\r\n        // This is handy to conditionally define a group of screens\r\n        acc.push(\r\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\r\n            child.props.children,\r\n            child.props.navigationKey,\r\n            child.type !== Group\r\n              ? groupOptions\r\n              : groupOptions != null\r\n                ? [...groupOptions, child.props.screenOptions]\r\n                : [child.props.screenOptions],\r\n            typeof child.props.screenLayout === 'function'\r\n              ? child.props.screenLayout\r\n              : groupLayout\r\n          )\r\n        );\r\n        return acc;\r\n      }\r\n    }\r\n\r\n    throw new Error(\r\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\r\n        React.isValidElement(child)\r\n          ? `'${\r\n              typeof child.type === 'string' ? child.type : child.type?.name\r\n            }'${\r\n              child.props != null &&\r\n              typeof child.props === 'object' &&\r\n              'name' in child.props &&\r\n              child.props?.name\r\n                ? ` for the screen '${child.props.name}'`\r\n                : ''\r\n            }`\r\n          : typeof child === 'object'\r\n            ? JSON.stringify(child)\r\n            : `'${String(child)}'`\r\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\r\n    );\r\n  }, []);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    configs.forEach((config) => {\r\n      const { name, children, component, getComponent } = config.props;\r\n\r\n      if (typeof name !== 'string' || !name) {\r\n        throw new Error(\r\n          `Got an invalid name (${JSON.stringify(\r\n            name\r\n          )}) for the screen. It must be a non-empty string.`\r\n        );\r\n      }\r\n\r\n      if (\r\n        children != null ||\r\n        component !== undefined ||\r\n        getComponent !== undefined\r\n      ) {\r\n        if (children != null && component !== undefined) {\r\n          throw new Error(\r\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (children != null && getComponent !== undefined) {\r\n          throw new Error(\r\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (component !== undefined && getComponent !== undefined) {\r\n          throw new Error(\r\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (children != null && typeof children !== 'function') {\r\n          throw new Error(\r\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\r\n          );\r\n        }\r\n\r\n        if (component !== undefined && !isValidElementType(component)) {\r\n          throw new Error(\r\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\r\n          );\r\n        }\r\n\r\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\r\n          throw new Error(\r\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\r\n          );\r\n        }\r\n\r\n        if (typeof component === 'function') {\r\n          if (component.name === 'component') {\r\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\r\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\r\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\r\n            console.warn(\r\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\r\n            );\r\n          } else if (/^[a-z]/.test(component.name)) {\r\n            console.warn(\r\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return configs;\r\n};\r\n\r\n/**\r\n * Hook for building navigators.\r\n *\r\n * @param createRouter Factory method which returns router object.\r\n * @param options Options object containing `children` and additional options for the router.\r\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\r\n */\r\nexport function useNavigationBuilder<\r\n  State extends NavigationState,\r\n  RouterOptions extends DefaultRouterOptions,\r\n  ActionHelpers extends Record<string, (...args: any) => void>,\r\n  ScreenOptions extends {},\r\n  EventMap extends Record<string, any>,\r\n>(\r\n  createRouter: RouterFactory<State, any, RouterOptions>,\r\n  options: DefaultNavigatorOptions<\r\n    ParamListBase,\r\n    string | undefined,\r\n    State,\r\n    ScreenOptions,\r\n    EventMap,\r\n    any\r\n  > &\r\n    RouterOptions\r\n) {\r\n  const navigatorKey = useRegisterNavigator();\r\n\r\n  const route = React.useContext(NavigationRouteContext) as\r\n    | NavigatorRoute\r\n    | undefined;\r\n\r\n  const {\r\n    children,\r\n    layout,\r\n    screenOptions,\r\n    screenLayout,\r\n    screenListeners,\r\n    ...rest\r\n  } = options;\r\n\r\n  const routeConfigs = getRouteConfigsFromChildren<\r\n    State,\r\n    ScreenOptions,\r\n    EventMap\r\n  >(children);\r\n\r\n  const router = useLazyValue<Router<State, any>>(() => {\r\n    if (\r\n      rest.initialRouteName != null &&\r\n      routeConfigs.every(\r\n        (config) => config.props.name !== rest.initialRouteName\r\n      )\r\n    ) {\r\n      throw new Error(\r\n        `Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`\r\n      );\r\n    }\r\n\r\n    return createRouter(rest as unknown as RouterOptions);\r\n  });\r\n\r\n  const screens = routeConfigs.reduce<\r\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\r\n  >((acc, config) => {\r\n    if (config.props.name in acc) {\r\n      throw new Error(\r\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\r\n      );\r\n    }\r\n\r\n    acc[config.props.name] = config;\r\n    return acc;\r\n  }, {});\r\n\r\n  const routeNames = routeConfigs.map((config) => config.props.name);\r\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\r\n    (acc, curr) => {\r\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\r\n    (acc, curr) => {\r\n      const { initialParams } = screens[curr].props;\r\n      acc[curr] = initialParams;\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n  const routeGetIdList = routeNames.reduce<\r\n    RouterConfigOptions['routeGetIdList']\r\n  >(\r\n    (acc, curr) =>\r\n      Object.assign(acc, {\r\n        [curr]: screens[curr].props.getId,\r\n      }),\r\n    {}\r\n  );\r\n\r\n  if (!routeNames.length) {\r\n    throw new Error(\r\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\r\n    );\r\n  }\r\n\r\n  const isStateValid = React.useCallback(\r\n    (state: NavigationState | PartialState<NavigationState>) =>\r\n      state.type === undefined || state.type === router.type,\r\n    [router.type]\r\n  );\r\n\r\n  const isStateInitialized = React.useCallback(\r\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\r\n      state !== undefined && state.stale === false && isStateValid(state),\r\n    [isStateValid]\r\n  );\r\n\r\n  const {\r\n    state: currentState,\r\n    getState: getCurrentState,\r\n    setState: setCurrentState,\r\n    setKey,\r\n    getKey,\r\n    getIsInitial,\r\n  } = React.useContext(NavigationStateContext);\r\n\r\n  const stateCleanedUp = React.useRef(false);\r\n\r\n  const setState = useLatestCallback(\r\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\r\n      if (stateCleanedUp.current) {\r\n        // State might have been already cleaned up due to unmount\r\n        // We do not want to expose API allowing to override this\r\n        // This would lead to old data preservation on main navigator unmount\r\n        return;\r\n      }\r\n\r\n      setCurrentState(state);\r\n    }\r\n  );\r\n\r\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\r\n    const initialRouteParamList = routeNames.reduce<\r\n      Record<string, object | undefined>\r\n    >((acc, curr) => {\r\n      const { initialParams } = screens[curr].props;\r\n      const initialParamsFromParams =\r\n        route?.params?.state == null &&\r\n        route?.params?.initial !== false &&\r\n        route?.params?.screen === curr\r\n          ? route.params.params\r\n          : undefined;\r\n\r\n      acc[curr] =\r\n        initialParams !== undefined || initialParamsFromParams !== undefined\r\n          ? {\r\n              ...initialParams,\r\n              ...initialParamsFromParams,\r\n            }\r\n          : undefined;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    // If the current state isn't initialized on first render, we initialize it\r\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\r\n    // Otherwise assume that the state was provided as initial state\r\n    // So we need to rehydrate it to make it usable\r\n    if (\r\n      (currentState === undefined || !isStateValid(currentState)) &&\r\n      route?.params?.state == null &&\r\n      !(\r\n        typeof route?.params?.screen === 'string' &&\r\n        route?.params?.initial !== false\r\n      )\r\n    ) {\r\n      return [\r\n        router.getInitialState({\r\n          routeNames,\r\n          routeParamList: initialRouteParamList,\r\n          routeGetIdList,\r\n        }),\r\n        true,\r\n      ];\r\n    } else {\r\n      let stateFromParams;\r\n\r\n      if (route?.params?.state != null) {\r\n        stateFromParams = route.params.state;\r\n      } else if (\r\n        typeof route?.params?.screen === 'string' &&\r\n        route?.params?.initial !== false\r\n      ) {\r\n        stateFromParams = {\r\n          index: 0,\r\n          routes: [\r\n            {\r\n              name: route.params.screen,\r\n              params: route.params.params,\r\n              path: route.params.path,\r\n            },\r\n          ],\r\n        };\r\n      }\r\n\r\n      return [\r\n        router.getRehydratedState(\r\n          (stateFromParams ?? currentState) as PartialState<State>,\r\n          {\r\n            routeNames,\r\n            routeParamList: initialRouteParamList,\r\n            routeGetIdList,\r\n          }\r\n        ),\r\n        false,\r\n      ];\r\n    }\r\n    // We explicitly don't include routeNames, route.params etc. in the dep list\r\n    // below. We want to avoid forcing a new state to be calculated in those cases\r\n    // Instead, we handle changes to these in the nextState code below. Note\r\n    // that some changes to routeConfigs are explicitly ignored, such as changes\r\n    // to initialParams\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentState, router, isStateValid]);\r\n\r\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\r\n\r\n  React.useEffect(() => {\r\n    previousRouteKeyListRef.current = routeKeyList;\r\n  });\r\n\r\n  const previousRouteKeyList = previousRouteKeyListRef.current;\r\n\r\n  let state =\r\n    // If the state isn't initialized, or stale, use the state we initialized instead\r\n    // The state won't update until there's a change needed in the state we have initialized locally\r\n    // So it'll be `undefined` or stale until the first navigation event happens\r\n    isStateInitialized(currentState)\r\n      ? (currentState as State)\r\n      : (initializedState as State);\r\n\r\n  let nextState: State = state;\r\n\r\n  if (\r\n    !isArrayEqual(state.routeNames, routeNames) ||\r\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\r\n  ) {\r\n    const navigatorStateForNextRouteNamesChange =\r\n      options.UNSTABLE_getStateForRouteNamesChange?.(state);\r\n    // When the list of route names change, the router should handle it to remove invalid routes\r\n    nextState = navigatorStateForNextRouteNamesChange\r\n      ? // @ts-expect-error this is ok\r\n        router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\r\n          routeNames,\r\n          routeParamList,\r\n          routeGetIdList,\r\n        })\r\n      : router.getStateForRouteNamesChange(state, {\r\n          routeNames,\r\n          routeParamList,\r\n          routeGetIdList,\r\n          routeKeyChanges: Object.keys(routeKeyList).filter(\r\n            (name) =>\r\n              name in previousRouteKeyList &&\r\n              routeKeyList[name] !== previousRouteKeyList[name]\r\n          ),\r\n        });\r\n  }\r\n\r\n  const previousNestedParamsRef = React.useRef(route?.params);\r\n\r\n  React.useEffect(() => {\r\n    previousNestedParamsRef.current = route?.params;\r\n  }, [route?.params]);\r\n\r\n  if (route?.params) {\r\n    const previousParams = previousNestedParamsRef.current;\r\n\r\n    let action: CommonActions.Action | undefined;\r\n\r\n    if (\r\n      typeof route.params.state === 'object' &&\r\n      route.params.state != null &&\r\n      route.params !== previousParams\r\n    ) {\r\n      // If the route was updated with new state, we should reset to it\r\n      action = CommonActions.reset(route.params.state);\r\n    } else if (\r\n      typeof route.params.screen === 'string' &&\r\n      ((route.params.initial === false && isFirstStateInitialization) ||\r\n        route.params !== previousParams)\r\n    ) {\r\n      // If the route was updated with new screen name and/or params, we should navigate there\r\n      action = CommonActions.navigate({\r\n        name: route.params.screen,\r\n        params: route.params.params,\r\n        path: route.params.path,\r\n      });\r\n    }\r\n\r\n    // The update should be limited to current navigator only, so we call the router manually\r\n    const updatedState = action\r\n      ? router.getStateForAction(nextState, action, {\r\n          routeNames,\r\n          routeParamList,\r\n          routeGetIdList,\r\n        })\r\n      : null;\r\n\r\n    nextState =\r\n      updatedState !== null\r\n        ? router.getRehydratedState(updatedState, {\r\n            routeNames,\r\n            routeParamList,\r\n            routeGetIdList,\r\n          })\r\n        : nextState;\r\n  }\r\n\r\n  const shouldUpdate = state !== nextState;\r\n\r\n  useScheduleUpdate(() => {\r\n    if (shouldUpdate) {\r\n      // If the state needs to be updated, we'll schedule an update\r\n      setState(nextState);\r\n    }\r\n  });\r\n\r\n  // The up-to-date state will come in next render, but we don't need to wait for it\r\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\r\n  // So we override the state object we return to use the latest state as soon as possible\r\n  state = nextState;\r\n\r\n  React.useEffect(() => {\r\n    // In strict mode, React will double-invoke effects.\r\n    // So we need to reset the flag if component was not unmounted\r\n    stateCleanedUp.current = false;\r\n\r\n    setKey(navigatorKey);\r\n\r\n    if (!getIsInitial()) {\r\n      // If it's not initial render, we need to update the state\r\n      // This will make sure that our container gets notifier of state changes due to new mounts\r\n      // This is necessary for proper screen tracking, URL updates etc.\r\n      setState(nextState);\r\n    }\r\n\r\n    return () => {\r\n      // We need to clean up state for this navigator on unmount\r\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\r\n        setCurrentState(undefined);\r\n        stateCleanedUp.current = true;\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // In some cases (e.g. route names change), internal state might have changed\r\n  // But it hasn't been committed yet, so hasn't propagated to the sync external store\r\n  // During this time, we need to return the internal state in `getState`\r\n  // Otherwise it can result in inconsistent state during render in children\r\n  // To avoid this, we use a ref for render phase, and immediately clear it on commit\r\n  const stateRef = React.useRef<State | null>(state);\r\n\r\n  stateRef.current = state;\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    stateRef.current = null;\r\n  });\r\n\r\n  const getState = useLatestCallback((): State => {\r\n    const currentState = getCurrentState();\r\n\r\n    return deepFreeze(\r\n      (isStateInitialized(currentState)\r\n        ? currentState\r\n        : initializedState) as State\r\n    );\r\n  });\r\n\r\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\r\n    const routeNames = [];\r\n\r\n    let route: Route<string> | undefined;\r\n\r\n    if (e.target) {\r\n      route = state.routes.find((route) => route.key === e.target);\r\n\r\n      if (route?.name) {\r\n        routeNames.push(route.name);\r\n      }\r\n    } else {\r\n      route = state.routes[state.index];\r\n      routeNames.push(\r\n        ...Object.keys(screens).filter((name) => route?.name === name)\r\n      );\r\n    }\r\n\r\n    if (route == null) {\r\n      return;\r\n    }\r\n\r\n    const navigation = descriptors[route.key].navigation;\r\n\r\n    const listeners = ([] as (((e: any) => void) | undefined)[])\r\n      .concat(\r\n        // Get an array of listeners for all screens + common listeners on navigator\r\n        ...[\r\n          screenListeners,\r\n          ...routeNames.map((name) => {\r\n            const { listeners } = screens[name].props;\r\n            return listeners;\r\n          }),\r\n        ].map((listeners) => {\r\n          const map =\r\n            typeof listeners === 'function'\r\n              ? listeners({ route: route as any, navigation })\r\n              : listeners;\r\n\r\n          return map\r\n            ? Object.keys(map)\r\n                .filter((type) => type === e.type)\r\n                .map((type) => map?.[type])\r\n            : undefined;\r\n        })\r\n      )\r\n      // We don't want same listener to be called multiple times for same event\r\n      // So we remove any duplicate functions from the array\r\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\r\n\r\n    listeners.forEach((listener) => listener?.(e));\r\n  });\r\n\r\n  useFocusEvents({ state, emitter });\r\n\r\n  React.useEffect(() => {\r\n    emitter.emit({ type: 'state', data: { state } });\r\n  }, [emitter, state]);\r\n\r\n  const { listeners: childListeners, addListener } = useChildListeners();\r\n\r\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\r\n\r\n  const onAction = useOnAction({\r\n    router,\r\n    getState,\r\n    setState,\r\n    key: route?.key,\r\n    actionListeners: childListeners.action,\r\n    beforeRemoveListeners: keyedListeners.beforeRemove,\r\n    routerConfigOptions: {\r\n      routeNames,\r\n      routeParamList,\r\n      routeGetIdList,\r\n    },\r\n    emitter,\r\n  });\r\n\r\n  const onRouteFocus = useOnRouteFocus({\r\n    router,\r\n    key: route?.key,\r\n    getState,\r\n    setState,\r\n  });\r\n\r\n  const navigation = useNavigationHelpers<\r\n    State,\r\n    ActionHelpers,\r\n    NavigationAction,\r\n    EventMap\r\n  >({\r\n    id: options.id,\r\n    onAction,\r\n    getState,\r\n    emitter,\r\n    router,\r\n    stateRef,\r\n  });\r\n\r\n  useFocusedListenersChildrenAdapter({\r\n    navigation,\r\n    focusedListeners: childListeners.focus,\r\n  });\r\n\r\n  useOnGetState({\r\n    getState,\r\n    getStateListeners: keyedListeners.getState,\r\n  });\r\n\r\n  const { describe, descriptors } = useDescriptors<\r\n    State,\r\n    ActionHelpers,\r\n    ScreenOptions,\r\n    EventMap\r\n  >({\r\n    state,\r\n    screens,\r\n    navigation,\r\n    screenOptions,\r\n    screenLayout,\r\n    onAction,\r\n    getState,\r\n    setState,\r\n    onRouteFocus,\r\n    addListener,\r\n    addKeyedListener,\r\n    router,\r\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\r\n    emitter,\r\n  });\r\n\r\n  useCurrentRender({\r\n    state,\r\n    navigation,\r\n    descriptors,\r\n  });\r\n\r\n  const NavigationContent = useComponent((children: React.ReactNode) => {\r\n    const element =\r\n      layout != null\r\n        ? layout({\r\n            state,\r\n            descriptors,\r\n            navigation,\r\n            children,\r\n          })\r\n        : children;\r\n\r\n    return (\r\n      <NavigationHelpersContext.Provider value={navigation}>\r\n        <PreventRemoveProvider>{element}</PreventRemoveProvider>\r\n      </NavigationHelpersContext.Provider>\r\n    );\r\n  });\r\n\r\n  return {\r\n    state,\r\n    navigation,\r\n    describe,\r\n    descriptors,\r\n    NavigationContent,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}