{"ast":null,"code":"export function createStringifySafeWithLimits(limits) {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY\n  } = limits;\n  const stack = [];\n  function replacer(_key, value) {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n    if (typeof value === 'string') {\n      const truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n    let retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);\n      }\n    } else {\n      if (typeof value !== 'object') {\n        throw new Error('This was already found earlier');\n      }\n      const keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        retval = {};\n        for (const k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n  return function stringifySafe(arg) {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch {\n        if (typeof arg.toString === 'function') {\n          try {\n            return arg.toString();\n          } catch {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\nconst stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50\n});\nexport default stringifySafe;","map":{"version":3,"names":["createStringifySafeWithLimits","limits","maxDepth","Number","POSITIVE_INFINITY","maxStringLimit","maxArrayLimit","maxObjectKeysLimit","stack","replacer","_key","value","length","shift","truncatedString","substring","retval","Array","isArray","slice","concat","Error","keys","Object","k","truncatedKey","unshift","stringifySafe","arg","undefined","toString","name","message","ret","JSON","stringify"],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/@expo/metro-runtime/src/error-overlay/modules/stringifySafe/index.ts"],"sourcesContent":["/**\r\n * Copyright (c) 650 Industries.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/**\r\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\r\n * (e.g. from circular objects) and always returns a string and never throws.\r\n */\r\nexport function createStringifySafeWithLimits(limits: {\r\n  maxDepth?: number;\r\n  maxStringLimit?: number;\r\n  maxArrayLimit?: number;\r\n  maxObjectKeysLimit?: number;\r\n}): (foo: any) => string {\r\n  const {\r\n    maxDepth = Number.POSITIVE_INFINITY,\r\n    maxStringLimit = Number.POSITIVE_INFINITY,\r\n    maxArrayLimit = Number.POSITIVE_INFINITY,\r\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\r\n  } = limits;\r\n  const stack: any[] = [];\r\n  function replacer(this: unknown, _key: string, value: any): any {\r\n    while (stack.length && this !== stack[0]) {\r\n      stack.shift();\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      const truncatedString = '...(truncated)...';\r\n      if (value.length > maxStringLimit + truncatedString.length) {\r\n        return value.substring(0, maxStringLimit) + truncatedString;\r\n      }\r\n      return value;\r\n    }\r\n    if (typeof value !== 'object' || value === null) {\r\n      return value;\r\n    }\r\n\r\n    let retval = value;\r\n    if (Array.isArray(value)) {\r\n      if (stack.length >= maxDepth) {\r\n        retval = `[ ... array with ${value.length} values ... ]`;\r\n      } else if (value.length > maxArrayLimit) {\r\n        retval = value\r\n          .slice(0, maxArrayLimit)\r\n          .concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);\r\n      }\r\n    } else {\r\n      // Add refinement after Array.isArray call.\r\n      if (typeof value !== 'object') {\r\n        throw new Error('This was already found earlier');\r\n      }\r\n      const keys = Object.keys(value);\r\n      if (stack.length >= maxDepth) {\r\n        retval = `{ ... object with ${keys.length} keys ... }`;\r\n      } else if (keys.length > maxObjectKeysLimit) {\r\n        // Return a sample of the keys.\r\n        retval = {};\r\n        for (const k of keys.slice(0, maxObjectKeysLimit)) {\r\n          retval[k] = value[k];\r\n        }\r\n        const truncatedKey = '...(truncated keys)...';\r\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\r\n      }\r\n    }\r\n    stack.unshift(retval);\r\n    return retval;\r\n  }\r\n\r\n  return function stringifySafe(arg: any): string {\r\n    if (arg === undefined) {\r\n      return 'undefined';\r\n    } else if (arg === null) {\r\n      return 'null';\r\n    } else if (typeof arg === 'function') {\r\n      try {\r\n        return arg.toString();\r\n      } catch {\r\n        return '[function unknown]';\r\n      }\r\n    } else if (arg instanceof Error) {\r\n      return arg.name + ': ' + arg.message;\r\n    } else {\r\n      // Perform a try catch, just in case the object has a circular\r\n      // reference or stringify throws for some other reason.\r\n      try {\r\n        const ret = JSON.stringify(arg, replacer);\r\n        if (ret === undefined) {\r\n          return '[\"' + typeof arg + '\" failed to stringify]';\r\n        }\r\n        return ret;\r\n      } catch {\r\n        if (typeof arg.toString === 'function') {\r\n          try {\r\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\r\n            return arg.toString();\r\n          } catch {}\r\n        }\r\n      }\r\n    }\r\n    return '[\"' + typeof arg + '\" failed to stringify]';\r\n  };\r\n}\r\n\r\nconst stringifySafe = createStringifySafeWithLimits({\r\n  maxDepth: 10,\r\n  maxStringLimit: 100,\r\n  maxArrayLimit: 50,\r\n  maxObjectKeysLimit: 50,\r\n});\r\n\r\nexport default stringifySafe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}