{"ast":null,"code":"import ReactNativePlatform from \"react-native-web/dist/exports/Platform\";\nimport { isDOMAvailable, canUseEventListeners, canUseViewport, isAsyncDebugging } from './environment/browser';\nif (__DEV__ && typeof \"web\" === 'undefined') {\n  console.warn(`The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`);\n}\nconst nativeSelect = true ? ReactNativePlatform.select : function select(specifics) {\n  if (!\"web\") return undefined;\n  if (specifics.hasOwnProperty(\"web\")) {\n    return specifics[\"web\"];\n  } else if (false && specifics.hasOwnProperty('native')) {\n    return specifics.native;\n  } else if (specifics.hasOwnProperty('default')) {\n    return specifics.default;\n  }\n  return undefined;\n};\nconst Platform = {\n  OS: \"web\" || ReactNativePlatform.OS,\n  select: nativeSelect,\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging\n};\nexport default Platform;","map":{"version":3,"names":["isDOMAvailable","canUseEventListeners","canUseViewport","isAsyncDebugging","__DEV__","console","warn","nativeSelect","ReactNativePlatform","select","specifics","undefined","hasOwnProperty","native","default","Platform","OS"],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/expo-modules-core/src/Platform.ts"],"sourcesContent":["import { PlatformOSType, Platform as ReactNativePlatform } from 'react-native';\r\n\r\nimport {\r\n  isDOMAvailable,\r\n  canUseEventListeners,\r\n  canUseViewport,\r\n  isAsyncDebugging,\r\n} from './environment/browser';\r\n\r\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\r\n\r\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\r\n\r\nif (__DEV__ && typeof process.env.EXPO_OS === 'undefined') {\r\n  console.warn(\r\n    `The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`\r\n  );\r\n}\r\n\r\nconst nativeSelect =\r\n  typeof window !== 'undefined'\r\n    ? ReactNativePlatform.select\r\n    : // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.\r\n      // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).\r\n      function select<T>(specifics: { [platform in PlatformSelectOSType]?: T }): T | undefined {\r\n        if (!process.env.EXPO_OS) return undefined;\r\n        if (specifics.hasOwnProperty(process.env.EXPO_OS)) {\r\n          return specifics[process.env.EXPO_OS]!;\r\n        } else if (process.env.EXPO_OS !== 'web' && specifics.hasOwnProperty('native')) {\r\n          return specifics.native!;\r\n        } else if (specifics.hasOwnProperty('default')) {\r\n          return specifics.default!;\r\n        }\r\n        // do nothing...\r\n        return undefined;\r\n      };\r\n\r\nconst Platform = {\r\n  /**\r\n   * Denotes the currently running platform.\r\n   * Can be one of ios, android, web.\r\n   */\r\n  OS: process.env.EXPO_OS || ReactNativePlatform.OS,\r\n  /**\r\n   * Returns the value with the matching platform.\r\n   * Object keys can be any of ios, android, native, web, default.\r\n   *\r\n   * @ios ios, native, default\r\n   * @android android, native, default\r\n   * @web web, default\r\n   */\r\n  select: nativeSelect as PlatformSelect,\r\n  /**\r\n   * Denotes if the DOM API is available in the current environment.\r\n   * The DOM is not available in native React runtimes and Node.js.\r\n   */\r\n  isDOMAvailable,\r\n  /**\r\n   * Denotes if the current environment can attach event listeners\r\n   * to the window. This will return false in native React\r\n   * runtimes and Node.js.\r\n   */\r\n  canUseEventListeners,\r\n  /**\r\n   * Denotes if the current environment can inspect properties of the\r\n   * screen on which the current window is being rendered. This will\r\n   * return false in native React runtimes and Node.js.\r\n   */\r\n  canUseViewport,\r\n  /**\r\n   * If the JavaScript is being executed in a remote JavaScript environment.\r\n   * When `true`, synchronous native invocations cannot be executed.\r\n   */\r\n  isAsyncDebugging,\r\n};\r\n\r\nexport default Platform;\r\n"],"mappings":";AAEA,SACEA,cAAc,EACdC,oBAAoB,EACpBC,cAAc,EACdC,gBAAgB,QACX,uBAAuB;AAM9B,IAAIC,OAAO,IAAI,YAA0B,KAAK,WAAW,EAAE;EACzDC,OAAO,CAACC,IAAI,CACV,mHACF,CAAC;AACH;AAEA,MAAMC,YAAY,GAChB,OACIC,mBAAmB,CAACC,MAAM,GAG1B,SAASA,MAAMA,CAAIC,SAAqD,EAAiB;EACvF,IAAI,MAAoB,EAAE,OAAOC,SAAS;EAC1C,IAAID,SAAS,CAACE,cAAc,MAAoB,CAAC,EAAE;IACjD,OAAOF,SAAS,OAAqB;EACvC,CAAC,MAAM,IAAI,SAAiCA,SAAS,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;IAC9E,OAAOF,SAAS,CAACG,MAAM;EACzB,CAAC,MAAM,IAAIH,SAAS,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;IAC9C,OAAOF,SAAS,CAACI,OAAO;EAC1B;EAEA,OAAOH,SAAS;AAClB,CAAC;AAEP,MAAMI,QAAQ,GAAG;EAKfC,EAAE,EAAE,SAAuBR,mBAAmB,CAACQ,EAAE;EASjDP,MAAM,EAAEF,YAA8B;EAKtCP,cAAc;EAMdC,oBAAoB;EAMpBC,cAAc;EAKdC;AACF,CAAC;AAED,eAAeY,QAAQ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}