{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMemoryHistory = createMemoryHistory;\nvar _nonSecure = require(\"nanoid/non-secure\");\nfunction createMemoryHistory() {\n  let index = 0;\n  let items = [];\n  const pending = [];\n  const interrupt = () => {\n    pending.forEach(it => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n  const history = {\n    get index() {\n      const id = window.history.state?.id;\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n      return 0;\n    },\n    get(index) {\n      return items[index];\n    },\n    backIndex({\n      path\n    }) {\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push({\n      path,\n      state\n    }) {\n      interrupt();\n      const id = (0, _nonSecure.nanoid)();\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n    replace({\n      path,\n      state\n    }) {\n      interrupt();\n      const id = window.history.state?.id ?? (0, _nonSecure.nanoid)();\n      let pathWithHash = path;\n      const hash = pathWithHash.includes('#') ? '' : location.hash;\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        pathWithHash = pathWithHash + hash;\n        items = [{\n          path: pathWithHash,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + hash;\n        }\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n      window.history.replaceState({\n        id\n      }, '', pathWithHash);\n    },\n    go(n) {\n      interrupt();\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      }\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex(item => item.id === id);\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n  };\n  return history;\n}","map":{"version":3,"names":["_nonSecure","require","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","nanoid","slice","length","pushState","replace","pathWithHash","hash","includes","location","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\@react-navigation\\native\\src\\createMemoryHistory.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/core';\r\nimport { nanoid } from 'nanoid/non-secure';\r\n\r\ntype HistoryRecord = {\r\n  // Unique identifier for this record to match it with window.history.state\r\n  id: string;\r\n  // Navigation state object for the history entry\r\n  state: NavigationState;\r\n  // Path of the history entry\r\n  path: string;\r\n};\r\n\r\nexport function createMemoryHistory() {\r\n  let index = 0;\r\n  let items: HistoryRecord[] = [];\r\n\r\n  // Pending callbacks for `history.go(n)`\r\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\r\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\r\n\r\n  const interrupt = () => {\r\n    // If another history operation was performed we need to interrupt existing ones\r\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\r\n    // Since otherwise it won't be correct if something else has changed\r\n    pending.forEach((it) => {\r\n      const cb = it.cb;\r\n      it.cb = () => cb(true);\r\n    });\r\n  };\r\n\r\n  const history = {\r\n    get index(): number {\r\n      // We store an id in the state instead of an index\r\n      // Index could get out of sync with in-memory values if page reloads\r\n      const id = window.history.state?.id;\r\n\r\n      if (id) {\r\n        const index = items.findIndex((item) => item.id === id);\r\n\r\n        return index > -1 ? index : 0;\r\n      }\r\n\r\n      return 0;\r\n    },\r\n\r\n    get(index: number) {\r\n      return items[index];\r\n    },\r\n\r\n    backIndex({ path }: { path: string }) {\r\n      // We need to find the index from the element before current to get closest path to go back to\r\n      for (let i = index - 1; i >= 0; i--) {\r\n        const item = items[i];\r\n\r\n        if (item.path === path) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    push({ path, state }: { path: string; state: NavigationState }) {\r\n      interrupt();\r\n\r\n      const id = nanoid();\r\n\r\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\r\n      // So we remove any existing entries after the current index to clean them up\r\n      items = items.slice(0, index + 1);\r\n\r\n      items.push({ path, state, id });\r\n      index = items.length - 1;\r\n\r\n      // We pass empty string for title because it's ignored in all browsers except safari\r\n      // We don't store state object in history.state because:\r\n      // - browsers have limits on how big it can be, and we don't control the size\r\n      // - while not recommended, there could be non-serializable data in state\r\n      window.history.pushState({ id }, '', path);\r\n    },\r\n\r\n    replace({ path, state }: { path: string; state: NavigationState }) {\r\n      interrupt();\r\n\r\n      const id = window.history.state?.id ?? nanoid();\r\n\r\n      // Need to keep the hash part of the path if there was no previous history entry\r\n      // or the previous history entry had the same path\r\n      let pathWithHash = path;\r\n      const hash = pathWithHash.includes('#') ? '' : location.hash;\r\n\r\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\r\n        // There are two scenarios for creating an array with only one history record:\r\n        // - When loaded id not found in the items array, this function by default will replace\r\n        //   the first item. We need to keep only the new updated object, otherwise it will break\r\n        //   the page when navigating forward in history.\r\n        // - This is the first time any state modifications are done\r\n        //   So we need to push the entry as there's nothing to replace\r\n\r\n        pathWithHash = pathWithHash + hash;\r\n        items = [{ path: pathWithHash, state, id }];\r\n        index = 0;\r\n      } else {\r\n        if (items[index].path === path) {\r\n          pathWithHash = pathWithHash + hash;\r\n        }\r\n        items[index] = { path, state, id };\r\n      }\r\n\r\n      window.history.replaceState({ id }, '', pathWithHash);\r\n    },\r\n\r\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\r\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\r\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\r\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\r\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\r\n    go(n: number) {\r\n      interrupt();\r\n\r\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\r\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\r\n      const nextIndex = index + n;\r\n      const lastItemIndex = items.length - 1;\r\n      if (n < 0 && !items[nextIndex]) {\r\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\r\n        n = -index;\r\n        index = 0;\r\n      } else if (n > 0 && nextIndex > lastItemIndex) {\r\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\r\n        n = lastItemIndex - index;\r\n        index = lastItemIndex;\r\n      } else {\r\n        index = nextIndex;\r\n      }\r\n\r\n      if (n === 0) {\r\n        return;\r\n      }\r\n\r\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\r\n      // So we need to somehow handle following cases:\r\n      // - There's history to go back, `history.go` is called, and `popstate` fires\r\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\r\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\r\n      return new Promise<void>((resolve, reject) => {\r\n        const done = (interrupted?: boolean) => {\r\n          clearTimeout(timer);\r\n\r\n          if (interrupted) {\r\n            reject(new Error('History was changed during navigation.'));\r\n            return;\r\n          }\r\n\r\n          // There seems to be a bug in Chrome regarding updating the title\r\n          // If we set a title just before calling `history.go`, the title gets lost\r\n          // However the value of `document.title` is still what we set it to\r\n          // It's just not displayed in the tab bar\r\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\r\n          // And set the title to what it was before so it gets applied\r\n          // It won't work without setting it to empty string coz otherwise title isn't changing\r\n          // Which means that the browser won't do anything after setting the title\r\n          const { title } = window.document;\r\n\r\n          window.document.title = '';\r\n          window.document.title = title;\r\n\r\n          resolve();\r\n        };\r\n\r\n        pending.push({ ref: done, cb: done });\r\n\r\n        // If navigation didn't happen within 100ms, assume that it won't happen\r\n        // This may not be accurate, but hopefully it won't take so much time\r\n        // In Chrome, navigation seems to happen instantly in next microtask\r\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\r\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\r\n        const timer = setTimeout(() => {\r\n          const index = pending.findIndex((it) => it.ref === done);\r\n\r\n          if (index > -1) {\r\n            pending[index].cb();\r\n            pending.splice(index, 1);\r\n          }\r\n        }, 100);\r\n\r\n        const onPopState = () => {\r\n          const id = window.history.state?.id;\r\n          const currentIndex = items.findIndex((item) => item.id === id);\r\n\r\n          // Fix createMemoryHistory.index variable's value\r\n          // as it may go out of sync when navigating in the browser.\r\n          index = Math.max(currentIndex, 0);\r\n\r\n          const last = pending.pop();\r\n\r\n          window.removeEventListener('popstate', onPopState);\r\n          last?.cb();\r\n        };\r\n\r\n        window.addEventListener('popstate', onPopState);\r\n        window.history.go(n);\r\n      });\r\n    },\r\n\r\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\r\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\r\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\r\n    listen(listener: () => void) {\r\n      const onPopState = () => {\r\n        if (pending.length) {\r\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\r\n          return;\r\n        }\r\n\r\n        listener();\r\n      };\r\n\r\n      window.addEventListener('popstate', onPopState);\r\n\r\n      return () => window.removeEventListener('popstate', onPopState);\r\n    },\r\n  };\r\n\r\n  return history;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}