{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.series = void 0;\nexports.useLinking = useLinking;\nvar _core = require(\"@react-navigation/core\");\nvar _fastDeepEqual = _interopRequireDefault(require(\"fast-deep-equal\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _createMemoryHistory = require(\"./createMemoryHistory.js\");\nvar _ServerContext = require(\"./ServerContext.js\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nconst series = cb => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\nexports.series = series;\nconst linkingHandlers = [];\nfunction useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = _core.getStateFromPath,\n  getPathFromState = _core.getPathFromState,\n  getActionFromState = _core.getActionFromState\n}, onUnhandledLinking) {\n  const independent = (0, _core.useNavigationIndependentTree)();\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    const handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(_createMemoryHistory.createMemoryHistory);\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const validateRoutesNotExistInRootState = React.useCallback(state => {\n    const navigation = ref.current;\n    const rootState = navigation?.getRootState();\n    return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n  }, [ref]);\n  const server = React.useContext(_ServerContext.ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      const location = server?.location ?? (true ? window.location : undefined);\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n      onUnhandledLinking(path);\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const {\n        location\n      } = window;\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = previousIndexRef.current ?? 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      const record = history.get(index);\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        onUnhandledLinking(path);\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const getPathForRoute = (route, state) => {\n      let path;\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          const focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n            path = route.path;\n          }\n        }\n      }\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n      const previousRoute = previousStateRef.current ? (0, _core.findFocusedRoute)(previousStateRef.current) : undefined;\n      if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n        path = path + location.hash;\n      }\n      return path;\n    };\n    if (ref.current) {\n      const state = ref.current.getRootState();\n      if (state) {\n        const route = (0, _core.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      if (!state) {\n        return;\n      }\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = (0, _core.findFocusedRoute)(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState && path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {\n              await history.go(nextIndex - currentIndex);\n            } else {\n              await history.go(historyDelta);\n            }\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {}\n        } else {\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        history.replace({\n          path,\n          state\n        });\n      }\n    };\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"names":["_core","require","_fastDeepEqual","_interopRequireDefault","React","_interopRequireWildcard","_createMemoryHistory","_ServerContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","findMatchingState","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","exports","linkingHandlers","useLinking","ref","enabled","config","getStateFromPath","getPathFromState","getActionFromState","onUnhandledLinking","independent","useNavigationIndependentTree","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","navigation","rootState","getRootState","some","routeNames","includes","name","server","useContext","ServerContext","getInitialState","value","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","previousIndex","record","resetRoot","action","dispatch","warn","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","params","previousRoute","hash","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\@react-navigation\\native\\src\\useLinking.tsx"],"sourcesContent":["import {\r\n  findFocusedRoute,\r\n  getActionFromState as getActionFromStateDefault,\r\n  getPathFromState as getPathFromStateDefault,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  type NavigationContainerRef,\r\n  type NavigationState,\r\n  type ParamListBase,\r\n  useNavigationIndependentTree,\r\n} from '@react-navigation/core';\r\nimport isEqual from 'fast-deep-equal';\r\nimport * as React from 'react';\r\n\r\nimport { createMemoryHistory } from './createMemoryHistory';\r\nimport { ServerContext } from './ServerContext';\r\nimport type { LinkingOptions } from './types';\r\n\r\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\r\n\r\n/**\r\n * Find the matching navigation state that changed between 2 navigation states\r\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\r\n */\r\nconst findMatchingState = <T extends NavigationState>(\r\n  a: T | undefined,\r\n  b: T | undefined\r\n): [T | undefined, T | undefined] => {\r\n  if (a === undefined || b === undefined || a.key !== b.key) {\r\n    return [undefined, undefined];\r\n  }\r\n\r\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\r\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\r\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\r\n\r\n  const aRoute = a.routes[a.index];\r\n  const bRoute = b.routes[b.index];\r\n\r\n  const aChildState = aRoute.state as T | undefined;\r\n  const bChildState = bRoute.state as T | undefined;\r\n\r\n  // Stop here if this is the state object that changed:\r\n  // - history length is different\r\n  // - focused routes are different\r\n  // - one of them doesn't have child state\r\n  // - child state keys are different\r\n  if (\r\n    aHistoryLength !== bHistoryLength ||\r\n    aRoute.key !== bRoute.key ||\r\n    aChildState === undefined ||\r\n    bChildState === undefined ||\r\n    aChildState.key !== bChildState.key\r\n  ) {\r\n    return [a, b];\r\n  }\r\n\r\n  return findMatchingState(aChildState, bChildState);\r\n};\r\n\r\n/**\r\n * Run async function in series as it's called.\r\n */\r\nexport const series = (cb: () => Promise<void>) => {\r\n  let queue = Promise.resolve();\r\n  const callback = () => {\r\n    // eslint-disable-next-line promise/no-callback-in-promise\r\n    queue = queue.then(cb);\r\n  };\r\n  return callback;\r\n};\r\n\r\nconst linkingHandlers: symbol[] = [];\r\n\r\ntype Options = LinkingOptions<ParamListBase>;\r\n\r\nexport function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\r\n  {\r\n    enabled = true,\r\n    config,\r\n    getStateFromPath = getStateFromPathDefault,\r\n    getPathFromState = getPathFromStateDefault,\r\n    getActionFromState = getActionFromStateDefault,\r\n  }: Options,\r\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\r\n) {\r\n  const independent = useNavigationIndependentTree();\r\n\r\n  React.useEffect(() => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return undefined;\r\n    }\r\n\r\n    if (independent) {\r\n      return undefined;\r\n    }\r\n\r\n    if (enabled !== false && linkingHandlers.length) {\r\n      console.error(\r\n        [\r\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\r\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\r\n          '- Only a single instance of the root component is rendered',\r\n        ]\r\n          .join('\\n')\r\n          .trim()\r\n      );\r\n    }\r\n\r\n    const handler = Symbol();\r\n\r\n    if (enabled !== false) {\r\n      linkingHandlers.push(handler);\r\n    }\r\n\r\n    return () => {\r\n      const index = linkingHandlers.indexOf(handler);\r\n\r\n      if (index > -1) {\r\n        linkingHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }, [enabled, independent]);\r\n\r\n  const [history] = React.useState(createMemoryHistory);\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const enabledRef = React.useRef(enabled);\r\n  const configRef = React.useRef(config);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n  const getPathFromStateRef = React.useRef(getPathFromState);\r\n  const getActionFromStateRef = React.useRef(getActionFromState);\r\n\r\n  React.useEffect(() => {\r\n    enabledRef.current = enabled;\r\n    configRef.current = config;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n    getPathFromStateRef.current = getPathFromState;\r\n    getActionFromStateRef.current = getActionFromState;\r\n  });\r\n\r\n  const validateRoutesNotExistInRootState = React.useCallback(\r\n    (state: ResultState) => {\r\n      const navigation = ref.current;\r\n      const rootState = navigation?.getRootState();\r\n      // Make sure that the routes in the state exist in the root navigator\r\n      // Otherwise there's an error in the linking configuration\r\n      return state?.routes.some((r) => !rootState?.routeNames.includes(r.name));\r\n    },\r\n    [ref]\r\n  );\r\n\r\n  const server = React.useContext(ServerContext);\r\n\r\n  const getInitialState = React.useCallback(() => {\r\n    let value: ResultState | undefined;\r\n\r\n    if (enabledRef.current) {\r\n      const location =\r\n        server?.location ??\r\n        (typeof window !== 'undefined' ? window.location : undefined);\r\n\r\n      const path = location ? location.pathname + location.search : undefined;\r\n\r\n      if (path) {\r\n        value = getStateFromPathRef.current(path, configRef.current);\r\n      }\r\n\r\n      // If the link were handled, it gets cleared in NavigationContainer\r\n      onUnhandledLinking(path);\r\n    }\r\n\r\n    const thenable = {\r\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\r\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\r\n      },\r\n      catch() {\r\n        return thenable;\r\n      },\r\n    };\r\n\r\n    return thenable as PromiseLike<ResultState | undefined>;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\r\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\r\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\r\n\r\n  React.useEffect(() => {\r\n    previousIndexRef.current = history.index;\r\n\r\n    return history.listen(() => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const { location } = window;\r\n\r\n      const path = location.pathname + location.search;\r\n      const index = history.index;\r\n\r\n      const previousIndex = previousIndexRef.current ?? 0;\r\n\r\n      previousIndexRef.current = index;\r\n      pendingPopStatePathRef.current = path;\r\n\r\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\r\n      // If it does we'll reset to that state object\r\n      // Otherwise, we'll handle it like a regular deep link\r\n      const record = history.get(index);\r\n\r\n      if (record?.path === path && record?.state) {\r\n        navigation.resetRoot(record.state);\r\n        return;\r\n      }\r\n\r\n      const state = getStateFromPathRef.current(path, configRef.current);\r\n\r\n      // We should only dispatch an action when going forward\r\n      // Otherwise the action will likely add items to history, which would mess things up\r\n      if (state) {\r\n        // If the link were handled, it gets cleared in NavigationContainer\r\n        onUnhandledLinking(path);\r\n        // Make sure that the routes in the state exist in the root navigator\r\n        // Otherwise there's an error in the linking configuration\r\n        if (validateRoutesNotExistInRootState(state)) {\r\n          return;\r\n        }\r\n\r\n        if (index > previousIndex) {\r\n          const action = getActionFromStateRef.current(\r\n            state,\r\n            configRef.current\r\n          );\r\n\r\n          if (action !== undefined) {\r\n            try {\r\n              navigation.dispatch(action);\r\n            } catch (e) {\r\n              // Ignore any errors from deep linking.\r\n              // This could happen in case of malformed links, navigation object not being initialized etc.\r\n              console.warn(\r\n                `An error occurred when trying to handle the link '${path}': ${\r\n                  typeof e === 'object' && e != null && 'message' in e\r\n                    ? e.message\r\n                    : e\r\n                }`\r\n              );\r\n            }\r\n          } else {\r\n            navigation.resetRoot(state);\r\n          }\r\n        } else {\r\n          navigation.resetRoot(state);\r\n        }\r\n      } else {\r\n        // if current path didn't return any state, we should revert to initial state\r\n        navigation.resetRoot(state);\r\n      }\r\n    });\r\n  }, [\r\n    enabled,\r\n    history,\r\n    onUnhandledLinking,\r\n    ref,\r\n    validateRoutesNotExistInRootState,\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n\r\n    const getPathForRoute = (\r\n      route: ReturnType<typeof findFocusedRoute>,\r\n      state: NavigationState\r\n    ): string => {\r\n      let path;\r\n\r\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\r\n      // This makes sure that we preserve the original URL for wildcard routes\r\n      if (route?.path) {\r\n        const stateForPath = getStateFromPathRef.current(\r\n          route.path,\r\n          configRef.current\r\n        );\r\n\r\n        if (stateForPath) {\r\n          const focusedRoute = findFocusedRoute(stateForPath);\r\n\r\n          if (\r\n            focusedRoute &&\r\n            focusedRoute.name === route.name &&\r\n            isEqual(focusedRoute.params, route.params)\r\n          ) {\r\n            path = route.path;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (path == null) {\r\n        path = getPathFromStateRef.current(state, configRef.current);\r\n      }\r\n\r\n      const previousRoute = previousStateRef.current\r\n        ? findFocusedRoute(previousStateRef.current)\r\n        : undefined;\r\n\r\n      // Preserve the hash if the route didn't change\r\n      if (\r\n        previousRoute &&\r\n        route &&\r\n        'key' in previousRoute &&\r\n        'key' in route &&\r\n        previousRoute.key === route.key\r\n      ) {\r\n        path = path + location.hash;\r\n      }\r\n\r\n      return path;\r\n    };\r\n\r\n    if (ref.current) {\r\n      // We need to record the current metadata on the first render if they aren't set\r\n      // This will allow the initial state to be in the history entry\r\n      const state = ref.current.getRootState();\r\n\r\n      if (state) {\r\n        const route = findFocusedRoute(state);\r\n        const path = getPathForRoute(route, state);\r\n\r\n        if (previousStateRef.current === undefined) {\r\n          previousStateRef.current = state;\r\n        }\r\n\r\n        history.replace({ path, state });\r\n      }\r\n    }\r\n\r\n    const onStateChange = async () => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const previousState = previousStateRef.current;\r\n      const state = navigation.getRootState();\r\n\r\n      // root state may not available, for example when root navigators switch inside the container\r\n      if (!state) {\r\n        return;\r\n      }\r\n\r\n      const pendingPath = pendingPopStatePathRef.current;\r\n      const route = findFocusedRoute(state);\r\n      const path = getPathForRoute(route, state);\r\n\r\n      previousStateRef.current = state;\r\n      pendingPopStatePathRef.current = undefined;\r\n\r\n      // To detect the kind of state change, we need to:\r\n      // - Find the common focused navigation state in previous and current state\r\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\r\n      // - If no common focused navigation state found, it's a replace\r\n      const [previousFocusedState, focusedState] = findMatchingState(\r\n        previousState,\r\n        state\r\n      );\r\n\r\n      if (\r\n        previousFocusedState &&\r\n        focusedState &&\r\n        // We should only handle push/pop if path changed from what was in last `popstate`\r\n        // Otherwise it's likely a change triggered by `popstate`\r\n        path !== pendingPath\r\n      ) {\r\n        const historyDelta =\r\n          (focusedState.history\r\n            ? focusedState.history.length\r\n            : focusedState.routes.length) -\r\n          (previousFocusedState.history\r\n            ? previousFocusedState.history.length\r\n            : previousFocusedState.routes.length);\r\n\r\n        if (historyDelta > 0) {\r\n          // If history length is increased, we should pushState\r\n          // Note that path might not actually change here, for example, drawer open should pushState\r\n          history.push({ path, state });\r\n        } else if (historyDelta < 0) {\r\n          // If history length is decreased, i.e. entries were removed, we want to go back\r\n\r\n          const nextIndex = history.backIndex({ path });\r\n          const currentIndex = history.index;\r\n\r\n          try {\r\n            if (\r\n              nextIndex !== -1 &&\r\n              nextIndex < currentIndex &&\r\n              // We should only go back if the entry exists and it's less than current index\r\n              history.get(nextIndex - currentIndex)\r\n            ) {\r\n              // An existing entry for this path exists and it's less than current index, go back to that\r\n              await history.go(nextIndex - currentIndex);\r\n            } else {\r\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\r\n              // This won't be correct if multiple routes were pushed in one go before\r\n              // Usually this shouldn't happen and this is a fallback for that\r\n              await history.go(historyDelta);\r\n            }\r\n\r\n            // Store the updated state as well as fix the path if incorrect\r\n            history.replace({ path, state });\r\n          } catch (e) {\r\n            // The navigation was interrupted\r\n          }\r\n        } else {\r\n          // If history length is unchanged, we want to replaceState\r\n          history.replace({ path, state });\r\n        }\r\n      } else {\r\n        // If no common navigation state was found, assume it's a replace\r\n        // This would happen if the user did a reset/conditionally changed navigators\r\n        history.replace({ path, state });\r\n      }\r\n    };\r\n\r\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\r\n    // This could happen since `history.go(n)` is asynchronous\r\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\r\n    return ref.current?.addListener('state', series(onStateChange));\r\n  }, [enabled, history, ref]);\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}