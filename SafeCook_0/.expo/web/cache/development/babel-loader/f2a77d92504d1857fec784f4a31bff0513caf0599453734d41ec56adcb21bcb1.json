{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLinkProps = useLinkProps;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _LinkingContext = require(\"./LinkingContext.js\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nconst getStateFromParams = params => {\n  if (params?.state) {\n    return params.state;\n  }\n  if (params?.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\nfunction useLinkProps({\n  screen,\n  params,\n  href,\n  action\n}) {\n  const root = React.useContext(_core.NavigationContainerRefContext);\n  const navigation = React.useContext(_core.NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(_LinkingContext.LinkingContext);\n  const onPress = e => {\n    const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey;\n    const isLeftClick = e.button == null || e.button === 0;\n    const isSelfTarget = [undefined, null, '', 'self'].includes(e.currentTarget?.target);\n    let shouldHandle = false;\n    if (_reactNative.Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n  const getPathFromStateHelper = options?.getPathFromState ?? _core.getPathFromState;\n  return {\n    href: href ?? (_reactNative.Platform.OS === 'web' && screen != null ? getPathFromStateHelper({\n      routes: [{\n        name: screen,\n        params: params,\n        state: getStateFromParams(params)\n      }]\n    }, options?.config) : undefined),\n    accessibilityRole: 'link',\n    onPress\n  };\n}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","_reactNative","_LinkingContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","href","action","root","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","options","LinkingContext","onPress","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","includes","currentTarget","target","shouldHandle","Platform","OS","preventDefault","dispatch","Error","navigate","getPathFromStateHelper","getPathFromState","config","accessibilityRole"],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\@react-navigation\\native\\src\\useLinkProps.tsx"],"sourcesContent":["import {\r\n  getPathFromState,\r\n  type NavigationAction,\r\n  NavigationContainerRefContext,\r\n  NavigationHelpersContext,\r\n  type NavigatorScreenParams,\r\n  type ParamListBase,\r\n} from '@react-navigation/core';\r\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\r\nimport * as React from 'react';\r\nimport { type GestureResponderEvent, Platform } from 'react-native';\r\n\r\nimport { LinkingContext } from './LinkingContext';\r\n\r\nexport type LinkProps<\r\n  ParamList extends ReactNavigation.RootParamList,\r\n  RouteName extends keyof ParamList = keyof ParamList,\r\n> =\r\n  | ({\r\n      href?: string;\r\n      action?: NavigationAction;\r\n    } & {\r\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\r\n        ? { screen: Screen; params?: ParamList[Screen] }\r\n        : { screen: Screen; params: ParamList[Screen] };\r\n    }[RouteName])\r\n  | {\r\n      href?: string;\r\n      action: NavigationAction;\r\n      screen?: undefined;\r\n      params?: undefined;\r\n    };\r\n\r\nconst getStateFromParams = (\r\n  params: NavigatorScreenParams<ParamListBase> | undefined\r\n): PartialState<NavigationState> | NavigationState | undefined => {\r\n  if (params?.state) {\r\n    return params.state;\r\n  }\r\n\r\n  if (params?.screen) {\r\n    return {\r\n      routes: [\r\n        {\r\n          name: params.screen,\r\n          params: params.params,\r\n          // @ts-expect-error this is fine ðŸ”¥\r\n          state: params.screen\r\n            ? getStateFromParams(\r\n                params.params as\r\n                  | NavigatorScreenParams<ParamListBase>\r\n                  | undefined\r\n              )\r\n            : undefined,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Hook to get props for an anchor tag so it can work with in page navigation.\r\n *\r\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\r\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\r\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\r\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\r\n */\r\nexport function useLinkProps<ParamList extends ReactNavigation.RootParamList>({\r\n  screen,\r\n  params,\r\n  href,\r\n  action,\r\n}: LinkProps<ParamList>) {\r\n  const root = React.useContext(NavigationContainerRefContext);\r\n  const navigation = React.useContext(NavigationHelpersContext);\r\n  const { options } = React.useContext(LinkingContext);\r\n\r\n  const onPress = (\r\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\r\n  ) => {\r\n    // @ts-expect-error: these properties exist on web, but not in React Native\r\n    const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\r\n    // @ts-expect-error: these properties exist on web, but not in React Native\r\n    const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\r\n    const isSelfTarget = [undefined, null, '', 'self'].includes(\r\n      // @ts-expect-error: these properties exist on web, but not in React Native\r\n      e.currentTarget?.target\r\n    ); // let browser handle \"target=_blank\" etc.\r\n\r\n    let shouldHandle = false;\r\n\r\n    if (Platform.OS !== 'web' || !e) {\r\n      shouldHandle = true;\r\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\r\n      e.preventDefault();\r\n      shouldHandle = true;\r\n    }\r\n\r\n    if (shouldHandle) {\r\n      if (action) {\r\n        if (navigation) {\r\n          navigation.dispatch(action);\r\n        } else if (root) {\r\n          root.dispatch(action);\r\n        } else {\r\n          throw new Error(\r\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\r\n          );\r\n        }\r\n      } else {\r\n        // @ts-expect-error This is already type-checked by the prop types\r\n        navigation?.navigate(screen, params);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\r\n\r\n  return {\r\n    href:\r\n      href ??\r\n      (Platform.OS === 'web' && screen != null\r\n        ? getPathFromStateHelper(\r\n            {\r\n              routes: [\r\n                {\r\n                  // @ts-expect-error this is fine ðŸ”¥\r\n                  name: screen,\r\n                  // @ts-expect-error this is fine ðŸ”¥\r\n                  params: params,\r\n                  // @ts-expect-error this is fine ðŸ”¥\r\n                  state: getStateFromParams(params),\r\n                },\r\n              ],\r\n            },\r\n            options?.config\r\n          )\r\n        : undefined),\r\n    accessibilityRole: 'link' as const,\r\n    onPress,\r\n  };\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AASA,IAAAC,KAAA,GAAAC,uBAAA,CAAAF,OAAA;AAAA,IAAAG,YAAA,GAAAH,OAAA;AAGA,IAAAI,eAAA,GAAAJ,OAAA;AAAkD,SAAAK,yBAAAC,CAAA;EAAA,yBAAAC,OAAA;EAAA,IAAAC,CAAA,OAAAD,OAAA;IAAAE,CAAA,OAAAF,OAAA;EAAA,QAAAF,wBAAA,YAAAA,CAAAC,CAAA;IAAA,OAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA;EAAA,GAAAF,CAAA;AAAA;AAAA,SAAAJ,wBAAAI,CAAA,EAAAE,CAAA;EAAA,KAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA;EAAA,aAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA;IAAAK,OAAA,EAAAL;EAAA;EAAA,IAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA;EAAA,IAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA;EAAA,IAAAQ,CAAA;MAAAC,SAAA;IAAA;IAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA;EAAA,SAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA;IAAA,IAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA;IAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA;EAAA;EAAA,OAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAAA;AAqBlD,MAAMW,kBAAkB,GACtBC,MAAwD,IACQ;EAChE,IAAIA,MAAM,EAAEC,KAAK,EAAE;IACjB,OAAOD,MAAM,CAACC,KAAK;EACrB;EAEA,IAAID,MAAM,EAAEE,MAAM,EAAE;IAClB,OAAO;MACLC,MAAM,EAAE,CACN;QACEC,IAAI,EAAEJ,MAAM,CAACE,MAAM;QACnBF,MAAM,EAAEA,MAAM,CAACA,MAAM;QAErBC,KAAK,EAAED,MAAM,CAACE,MAAM,GAChBH,kBAAkB,CAChBC,MAAM,CAACA,MAGT,CAAC,GACDK;MACN,CAAC;IAEL,CAAC;EACH;EAEA,OAAOA,SAAS;AAClB,CAAC;AAUM,SAASC,YAAYA,CAAkD;EAC5EJ,MAAM;EACNF,MAAM;EACNO,IAAI;EACJC;AACoB,CAAC,EAAE;EACvB,MAAMC,IAAI,GAAGlC,KAAK,CAACmC,UAAU,CAACrC,KAAA,CAAAsC,6BAA6B,CAAC;EAC5D,MAAMC,UAAU,GAAGrC,KAAK,CAACmC,UAAU,CAACrC,KAAA,CAAAwC,wBAAwB,CAAC;EAC7D,MAAM;IAAEC;EAAQ,CAAC,GAAGvC,KAAK,CAACmC,UAAU,CAAChC,eAAA,CAAAqC,cAAc,CAAC;EAEpD,MAAMC,OAAO,GACXpC,CAA2E,IACxE;IAEH,MAAMqC,cAAc,GAAGrC,CAAC,CAACsC,OAAO,IAAItC,CAAC,CAACuC,MAAM,IAAIvC,CAAC,CAACwC,OAAO,IAAIxC,CAAC,CAACyC,QAAQ;IAEvE,MAAMC,WAAW,GAAG1C,CAAC,CAAC2C,MAAM,IAAI,IAAI,IAAI3C,CAAC,CAAC2C,MAAM,KAAK,CAAC;IACtD,MAAMC,YAAY,GAAG,CAACnB,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAACoB,QAAQ,CAEzD7C,CAAC,CAAC8C,aAAa,EAAEC,MACnB,CAAC;IAED,IAAIC,YAAY,GAAG,KAAK;IAExB,IAAInD,YAAA,CAAAoD,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAI,CAAClD,CAAC,EAAE;MAC/BgD,YAAY,GAAG,IAAI;IACrB,CAAC,MAAM,IAAI,CAACX,cAAc,IAAIK,WAAW,IAAIE,YAAY,EAAE;MACzD5C,CAAC,CAACmD,cAAc,CAAC,CAAC;MAClBH,YAAY,GAAG,IAAI;IACrB;IAEA,IAAIA,YAAY,EAAE;MAChB,IAAIpB,MAAM,EAAE;QACV,IAAII,UAAU,EAAE;UACdA,UAAU,CAACoB,QAAQ,CAACxB,MAAM,CAAC;QAC7B,CAAC,MAAM,IAAIC,IAAI,EAAE;UACfA,IAAI,CAACuB,QAAQ,CAACxB,MAAM,CAAC;QACvB,CAAC,MAAM;UACL,MAAM,IAAIyB,KAAK,CACb,kFACF,CAAC;QACH;MACF,CAAC,MAAM;QAELrB,UAAU,EAAEsB,QAAQ,CAAChC,MAAM,EAAEF,MAAM,CAAC;MACtC;IACF;EACF,CAAC;EAED,MAAMmC,sBAAsB,GAAGrB,OAAO,EAAEsB,gBAAgB,IAAI/D,KAAA,CAAA+D,gBAAgB;EAE5E,OAAO;IACL7B,IAAI,EACFA,IAAI,KACH9B,YAAA,CAAAoD,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAI5B,MAAM,IAAI,IAAI,GACpCiC,sBAAsB,CACpB;MACEhC,MAAM,EAAE,CACN;QAEEC,IAAI,EAAEF,MAAM;QAEZF,MAAM,EAAEA,MAAM;QAEdC,KAAK,EAAEF,kBAAkB,CAACC,MAAM;MAClC,CAAC;IAEL,CAAC,EACDc,OAAO,EAAEuB,MACX,CAAC,GACDhC,SAAS,CAAC;IAChBiC,iBAAiB,EAAE,MAAe;IAClCtB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}