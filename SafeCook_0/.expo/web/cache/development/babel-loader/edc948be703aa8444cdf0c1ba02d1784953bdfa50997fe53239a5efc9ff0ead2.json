{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/expo-modules-core/src/ts-declarations/global.ts"],"sourcesContent":["import type { EventEmitter } from './EventEmitter';\r\nimport type { NativeModule } from './NativeModule';\r\nimport type { SharedObject } from './SharedObject';\r\nimport type { SharedRef } from './SharedRef';\r\n\r\nexport interface ExpoGlobal {\r\n  /**\r\n   * Host object that is used to access native Expo modules.\r\n   */\r\n  modules: Record<string, any>;\r\n\r\n  // Natively defined JS classes\r\n\r\n  /**\r\n   * @see EventEmitter\r\n   */\r\n  EventEmitter: typeof EventEmitter;\r\n\r\n  /**\r\n   * @see SharedObject\r\n   */\r\n  SharedObject: typeof SharedObject;\r\n\r\n  /**\r\n   * @see SharedRef\r\n   */\r\n  SharedRef: typeof SharedRef;\r\n\r\n  /**\r\n   * @see NativeModule\r\n   */\r\n  NativeModule: typeof NativeModule;\r\n\r\n  // Utils\r\n\r\n  /**\r\n   * Generates a random UUID v4 string.\r\n   */\r\n  uuidv4(): string;\r\n\r\n  /**\r\n   * Generates a UUID v5 string representation of the value in the specified namespace.\r\n   */\r\n  uuidv5(name: string, namespace: string): string;\r\n\r\n  /**\r\n   * Returns a static view config of the native view with the given name\r\n   * or `null` if the view has not been registered.\r\n   */\r\n  getViewConfig(viewName: string): ViewConfig | null;\r\n\r\n  /**\r\n   * Reloads the app.\r\n   */\r\n  reloadAppAsync(reason: string): Promise<void>;\r\n}\r\n\r\ntype ViewConfig = {\r\n  validAttributes: Record<string, any>;\r\n  directEventTypes: Record<string, { registrationName: string }>;\r\n};\r\n\r\nexport interface ExpoProcess {\r\n  env: {\r\n    NODE_ENV: string;\r\n    /** Used in `@expo/metro-runtime`. */\r\n    EXPO_DEV_SERVER_ORIGIN?: string;\r\n\r\n    EXPO_ROUTER_IMPORT_MODE?: string;\r\n    EXPO_ROUTER_ABS_APP_ROOT?: string;\r\n    EXPO_ROUTER_APP_ROOT?: string;\r\n\r\n    /** Maps to the `experiments.baseUrl` property in the project Expo config. This is injected by `babel-preset-expo` and supports automatic cache invalidation. */\r\n    EXPO_BASE_URL?: string;\r\n\r\n    /** Build-time representation of the `Platform.OS` value that the current JavaScript was bundled for. Does not support platform shaking wrapped require statements. */\r\n    EXPO_OS?: string;\r\n\r\n    [key: string]: any;\r\n  };\r\n  [key: string]: any;\r\n}\r\n\r\n/* eslint-disable no-var */\r\n\r\ndeclare global {\r\n  /**\r\n   * Global object containing all the native bindings installed by Expo.\r\n   * This object is not available in projects without the `expo` package installed.\r\n   */\r\n  var expo: ExpoGlobal;\r\n\r\n  // @ts-ignore - Suppress incompatible `NodeJS.Process` type if people include process type from `@types/node`\r\n  var process: ExpoProcess;\r\n\r\n  /**\r\n   * ExpoDomWebView is defined in `@expo/dom-webview` runtime.\r\n   */\r\n  var ExpoDomWebView: Record<string, any> | undefined;\r\n}\r\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}