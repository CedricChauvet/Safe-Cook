{"ast":null,"code":"import parseErrorStack from '../parseErrorStack';\nclass SyntheticError extends Error {\n  name = '';\n}\nlet exceptionID = 0;\nfunction parseException(e, isFatal) {\n  const stack = parseErrorStack(e?.stack);\n  const currentExceptionID = ++exceptionID;\n  const originalMessage = e.message || '';\n  let message = originalMessage;\n  if (e.componentStack != null) {\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\n  }\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n  if (!message.startsWith(namePrefix)) {\n    message = namePrefix + message;\n  }\n  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n  const data = {\n    message,\n    originalMessage: message === originalMessage ? null : originalMessage,\n    name: e.name == null || e.name === '' ? null : e.name,\n    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,\n    stack,\n    id: currentExceptionID,\n    isFatal,\n    extraData: {\n      jsEngine: e.jsEngine,\n      rawStack: e.stack\n    }\n  };\n  return Object.assign({}, data, {\n    isComponentError: !!e.isComponentError\n  });\n}\nfunction handleException(e) {\n  let error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    error = new SyntheticError(e);\n  }\n  require('../../LogBox').default.addException(parseException(error, true));\n}\nconst ErrorUtils = {\n  parseException,\n  handleException,\n  SyntheticError\n};\nexport default ErrorUtils;","map":{"version":3,"names":["parseErrorStack","SyntheticError","Error","name","exceptionID","parseException","e","isFatal","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","data","id","extraData","rawStack","Object","assign","isComponentError","handleException","error","require","default","addException","ErrorUtils"],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/@expo/metro-runtime/src/error-overlay/modules/ExceptionsManager/index.ts"],"sourcesContent":["/**\r\n * Copyright (c) 650 Industries.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport parseErrorStack from '../parseErrorStack';\r\n\r\ntype ExtendedError = any;\r\n\r\nclass SyntheticError extends Error {\r\n  name: string = '';\r\n}\r\n\r\n/**\r\n * Handles the developer-visible aspect of errors and exceptions\r\n */\r\nlet exceptionID = 0;\r\n\r\nfunction parseException(e: ExtendedError, isFatal: boolean) {\r\n  const stack = parseErrorStack(e?.stack);\r\n  const currentExceptionID = ++exceptionID;\r\n  const originalMessage = e.message || '';\r\n  let message = originalMessage;\r\n  if (e.componentStack != null) {\r\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\r\n  }\r\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\r\n\r\n  if (!message.startsWith(namePrefix)) {\r\n    message = namePrefix + message;\r\n  }\r\n\r\n  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\r\n\r\n  const data = {\r\n    message,\r\n    originalMessage: message === originalMessage ? null : originalMessage,\r\n    name: e.name == null || e.name === '' ? null : e.name,\r\n    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,\r\n    stack,\r\n    id: currentExceptionID,\r\n    isFatal,\r\n    extraData: {\r\n      jsEngine: e.jsEngine,\r\n      rawStack: e.stack,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...data,\r\n    isComponentError: !!e.isComponentError,\r\n  };\r\n}\r\n\r\n/**\r\n * Logs exceptions to the (native) console and displays them\r\n */\r\nfunction handleException(e: any) {\r\n  let error: Error;\r\n  if (e instanceof Error) {\r\n    error = e;\r\n  } else {\r\n    // Workaround for reporting errors caused by `throw 'some string'`\r\n    // Unfortunately there is no way to figure out the stacktrace in this\r\n    // case, so if you ended up here trying to trace an error, look for\r\n    // `throw '<error message>'` somewhere in your codebase.\r\n    error = new SyntheticError(e);\r\n  }\r\n\r\n  require('../../LogBox').default.addException(parseException(error, true));\r\n}\r\n\r\nconst ErrorUtils = {\r\n  parseException,\r\n  handleException,\r\n  SyntheticError,\r\n};\r\n\r\nexport default ErrorUtils;\r\n"],"mappings":"AAQA,OAAOA,eAAe,MAAM,oBAAoB;AAIhD,MAAMC,cAAc,SAASC,KAAK,CAAC;EACjCC,IAAI,GAAW,EAAE;AACnB;AAKA,IAAIC,WAAW,GAAG,CAAC;AAEnB,SAASC,cAAcA,CAACC,CAAgB,EAAEC,OAAgB,EAAE;EAC1D,MAAMC,KAAK,GAAGR,eAAe,CAACM,CAAC,EAAEE,KAAK,CAAC;EACvC,MAAMC,kBAAkB,GAAG,EAAEL,WAAW;EACxC,MAAMM,eAAe,GAAGJ,CAAC,CAACK,OAAO,IAAI,EAAE;EACvC,IAAIA,OAAO,GAAGD,eAAe;EAC7B,IAAIJ,CAAC,CAACM,cAAc,IAAI,IAAI,EAAE;IAC5BD,OAAO,IAAI,gCAAgCL,CAAC,CAACM,cAAc,EAAE;EAC/D;EACA,MAAMC,UAAU,GAAGP,CAAC,CAACH,IAAI,IAAI,IAAI,IAAIG,CAAC,CAACH,IAAI,KAAK,EAAE,GAAG,EAAE,GAAG,GAAGG,CAAC,CAACH,IAAI,IAAI;EAEvE,IAAI,CAACQ,OAAO,CAACG,UAAU,CAACD,UAAU,CAAC,EAAE;IACnCF,OAAO,GAAGE,UAAU,GAAGF,OAAO;EAChC;EAEAA,OAAO,GAAGL,CAAC,CAACS,QAAQ,IAAI,IAAI,GAAGJ,OAAO,GAAG,GAAGA,OAAO,gBAAgBL,CAAC,CAACS,QAAQ,EAAE;EAE/E,MAAMC,IAAI,GAAG;IACXL,OAAO;IACPD,eAAe,EAAEC,OAAO,KAAKD,eAAe,GAAG,IAAI,GAAGA,eAAe;IACrEP,IAAI,EAAEG,CAAC,CAACH,IAAI,IAAI,IAAI,IAAIG,CAAC,CAACH,IAAI,KAAK,EAAE,GAAG,IAAI,GAAGG,CAAC,CAACH,IAAI;IACrDS,cAAc,EAAE,OAAON,CAAC,CAACM,cAAc,KAAK,QAAQ,GAAGN,CAAC,CAACM,cAAc,GAAG,IAAI;IAC9EJ,KAAK;IACLS,EAAE,EAAER,kBAAkB;IACtBF,OAAO;IACPW,SAAS,EAAE;MACTH,QAAQ,EAAET,CAAC,CAACS,QAAQ;MACpBI,QAAQ,EAAEb,CAAC,CAACE;IACd;EACF,CAAC;EAED,OAAAY,MAAA,CAAAC,MAAA,KACKL,IAAI;IACPM,gBAAgB,EAAE,CAAC,CAAChB,CAAC,CAACgB;EAAgB;AAE1C;AAKA,SAASC,eAAeA,CAACjB,CAAM,EAAE;EAC/B,IAAIkB,KAAY;EAChB,IAAIlB,CAAC,YAAYJ,KAAK,EAAE;IACtBsB,KAAK,GAAGlB,CAAC;EACX,CAAC,MAAM;IAKLkB,KAAK,GAAG,IAAIvB,cAAc,CAACK,CAAC,CAAC;EAC/B;EAEAmB,OAAO,CAAC,cAAc,CAAC,CAACC,OAAO,CAACC,YAAY,CAACtB,cAAc,CAACmB,KAAK,EAAE,IAAI,CAAC,CAAC;AAC3E;AAEA,MAAMI,UAAU,GAAG;EACjBvB,cAAc;EACdkB,eAAe;EACftB;AACF,CAAC;AAED,eAAe2B,UAAU","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}