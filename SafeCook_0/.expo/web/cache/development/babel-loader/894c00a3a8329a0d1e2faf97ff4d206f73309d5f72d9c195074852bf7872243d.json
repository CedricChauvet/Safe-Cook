{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["C:\\Users\\chauv\\Desktop\\holberton-demoday\\Safe-Cook\\SafeCook_0\\node_modules\\@react-navigation\\native\\src\\types.tsx"],"sourcesContent":["import type {\r\n  getActionFromState as getActionFromStateDefault,\r\n  getPathFromState as getPathFromStateDefault,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  PathConfigMap,\r\n  Route,\r\n} from '@react-navigation/core';\r\n\r\ndeclare global {\r\n  // eslint-disable-next-line @typescript-eslint/no-namespace\r\n  namespace ReactNavigation {\r\n    interface Theme extends NativeTheme {}\r\n  }\r\n}\r\n\r\ntype FontStyle = {\r\n  fontFamily: string;\r\n  fontWeight:\r\n    | 'normal'\r\n    | 'bold'\r\n    | '100'\r\n    | '200'\r\n    | '300'\r\n    | '400'\r\n    | '500'\r\n    | '600'\r\n    | '700'\r\n    | '800'\r\n    | '900';\r\n};\r\n\r\ninterface NativeTheme {\r\n  dark: boolean;\r\n  colors: {\r\n    primary: string;\r\n    background: string;\r\n    card: string;\r\n    text: string;\r\n    border: string;\r\n    notification: string;\r\n  };\r\n  fonts: {\r\n    regular: FontStyle;\r\n    medium: FontStyle;\r\n    bold: FontStyle;\r\n    heavy: FontStyle;\r\n  };\r\n}\r\n\r\nexport type Theme = NativeTheme;\r\n\r\nexport type LocaleDirection = 'ltr' | 'rtl';\r\n\r\nexport type LinkingOptions<ParamList extends {}> = {\r\n  /**\r\n   * Whether deep link handling should be enabled.\r\n   * Defaults to true.\r\n   */\r\n  enabled?: boolean;\r\n  /**\r\n   * The prefixes are stripped from the URL before parsing them.\r\n   * Usually they are the `scheme` + `host` (e.g. `myapp://chat?user=jane`)\r\n   *\r\n   * This is not supported on Web.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * {\r\n   *    prefixes: [\r\n   *      \"myapp://\", // App-specific scheme\r\n   *      \"https://example.com\", // Prefix for universal links\r\n   *      \"https://*.example.com\" // Prefix which matches any subdomain\r\n   *    ]\r\n   * }\r\n   * ```\r\n   */\r\n  prefixes: string[];\r\n  /**\r\n   * Optional function which takes an incoming URL returns a boolean\r\n   * indicating whether React Navigation should handle it.\r\n   *\r\n   * This can be used to disable deep linking for specific URLs.\r\n   * e.g. URLs used for authentication, and not for deep linking to screens.\r\n   *\r\n   * This is not supported on Web.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * {\r\n   *   // Filter out URLs used by expo-auth-session\r\n   *   filter: (url) => !url.includes('+expo-auth-session')\r\n   * }\r\n   * ```\r\n   */\r\n  filter?: (url: string) => boolean;\r\n  /**\r\n   * Config to fine-tune how to parse the path.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * {\r\n   *   Chat: {\r\n   *     path: 'chat/:author/:id',\r\n   *     parse: { id: Number }\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\r\n  config?: {\r\n    /**\r\n     * Path string to match against for the whole navigation tree.\r\n     * It's not possible to specify params here since this doesn't belong to a screen.\r\n     * This is useful when the whole app is under a specific path.\r\n     * e.g. all of the screens are under `/admin` in `https://example.com/admin`\r\n     */\r\n    path?: string;\r\n    /**\r\n     * Path configuration for child screens.\r\n     */\r\n    screens: PathConfigMap<ParamList>;\r\n    /**\r\n     * Name of the initial route to use for the root navigator.\r\n     */\r\n    initialRouteName?: keyof ParamList;\r\n  };\r\n  /**\r\n   * Custom function to get the initial URL used for linking.\r\n   * Uses `Linking.getInitialURL()` by default.\r\n   *\r\n   * This is not supported on Web.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * {\r\n   *    getInitialURL () => Linking.getInitialURL(),\r\n   * }\r\n   * ```\r\n   */\r\n  getInitialURL?: () =>\r\n    | string\r\n    | null\r\n    | undefined\r\n    | Promise<string | null | undefined>;\r\n  /**\r\n   * Custom function to get subscribe to URL updates.\r\n   * Uses `Linking.addEventListener('url', callback)` by default.\r\n   *\r\n   * This is not supported on Web.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * {\r\n   *    subscribe: (listener) => {\r\n   *      const onReceiveURL = ({ url }) => listener(url);\r\n   *\r\n   *      Linking.addEventListener('url', onReceiveURL);\r\n   *\r\n   *      return () => Linking.removeEventListener('url', onReceiveURL);\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\r\n  subscribe?: (\r\n    listener: (url: string) => void\r\n  ) => undefined | void | (() => void);\r\n  /**\r\n   * Custom function to parse the URL to a valid navigation state (advanced).\r\n   */\r\n  getStateFromPath?: typeof getStateFromPathDefault;\r\n  /**\r\n   * Custom function to convert the state object to a valid URL (advanced).\r\n   * Only applicable on Web.\r\n   */\r\n  getPathFromState?: typeof getPathFromStateDefault;\r\n  /**\r\n   * Custom function to convert the state object to a valid action (advanced).\r\n   */\r\n  getActionFromState?: typeof getActionFromStateDefault;\r\n};\r\n\r\nexport type DocumentTitleOptions = {\r\n  enabled?: boolean;\r\n  formatter?: (\r\n    options: Record<string, any> | undefined,\r\n    route: Route<string> | undefined\r\n  ) => string;\r\n};\r\n\r\nexport type ServerContainerRef = {\r\n  getCurrentOptions(): Record<string, any> | undefined;\r\n};\r\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}