{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useEvent(eventEmitter, eventName, initialValue = null) {\n  const [event, setEvent] = useState(initialValue);\n  const listener = event => setEvent(event);\n  useEventListener(eventEmitter, eventName, listener);\n  return event;\n}\nexport function useEventListener(eventEmitter, eventName, listener) {\n  const listenerRef = useRef(listener);\n  listenerRef.current = listener;\n  useEffect(() => {\n    const callback = (...args) => listenerRef.current(...args);\n    const subscription = eventEmitter.addListener(eventName, callback);\n    return () => subscription.remove();\n  }, [eventEmitter, eventName, listenerRef]);\n}","map":{"version":3,"names":["useEffect","useRef","useState","useEvent","eventEmitter","eventName","initialValue","event","setEvent","listener","useEventListener","listenerRef","current","callback","args","subscription","addListener","remove"],"sources":["C:/Users/chauv/Desktop/holberton-demoday/Safe-Cook/SafeCook_0/node_modules/expo/src/hooks/useEvent.ts"],"sourcesContent":["import type { EventEmitter } from 'expo-modules-core/types';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\ntype AnyEventListener = (...args: any[]) => any;\r\n\r\n/**\r\n * Type helper that infers the event name from the emitter's events map.\r\n */\r\ntype InferEventName<TEventsMap> =\r\n  TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener>\r\n    ? TEventName\r\n    : never;\r\n\r\n/**\r\n * Type helper that infers the event listener from the emitter's events map.\r\n */\r\ntype InferEventListener<TEventsMap, TEventName extends keyof TEventsMap> =\r\n  TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener>\r\n    ? TEventListener\r\n    : never;\r\n\r\n/**\r\n * Type helper that infers the first parameter of the event listener.\r\n */\r\ntype InferEventParameter<\r\n  TEventListener extends AnyEventListener,\r\n  TInitialValue,\r\n> = TInitialValue extends Parameters<TEventListener>[0]\r\n  ? Parameters<TEventListener>[0]\r\n  : Parameters<TEventListener>[0] | TInitialValue | null;\r\n\r\n/**\r\n * React hook that listens to events emitted by the given object. The returned value is an event parameter\r\n * that gets updated whenever a new event is dispatched.\r\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\r\n * @param eventName Name of the event to listen to.\r\n * @param initialValue An event parameter to use until the event is called for the first time.\r\n * @returns A parameter of the event listener.\r\n * @example\r\n * ```tsx\r\n * import { useEvent } from 'expo';\r\n * import { VideoPlayer } from 'expo-video';\r\n *\r\n * export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {\r\n *   const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });\r\n *\r\n *   return <Text>{`Player status: ${status}`}</Text>;\r\n * }\r\n * ```\r\n */\r\nexport function useEvent<\r\n  TEventsMap extends Record<string, AnyEventListener>,\r\n  TEventName extends InferEventName<TEventsMap>,\r\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\r\n  TInitialValue extends Parameters<TEventListener>[0] | null,\r\n>(\r\n  eventEmitter: EventEmitter<TEventsMap>,\r\n  eventName: TEventName,\r\n  initialValue: TInitialValue | null = null\r\n): InferEventParameter<TEventListener, TInitialValue> {\r\n  const [event, setEvent] = useState<Parameters<TEventListener>[0] | TInitialValue | null>(\r\n    initialValue\r\n  );\r\n  const listener = (event: Parameters<TEventListener>[0]) => setEvent(event);\r\n\r\n  useEventListener(eventEmitter, eventName, listener as InferEventListener<TEventsMap, TEventName>);\r\n\r\n  return event as InferEventParameter<TEventListener, TInitialValue>;\r\n}\r\n\r\n/**\r\n * React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.\r\n * The event listener is automatically added during the first render and removed when the component unmounts.\r\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\r\n * @param eventName Name of the event to listen to.\r\n * @param listener A function to call when the event is dispatched.\r\n * @example\r\n * ```tsx\r\n * import { useEventListener } from 'expo';\r\n * import { useVideoPlayer, VideoView } from 'expo-video';\r\n *\r\n * export function VideoPlayerView() {\r\n *   const player = useVideoPlayer(videoSource);\r\n *\r\n *   useEventListener(player, 'playingChange', ({ isPlaying }) => {\r\n *     console.log('Player is playing:', isPlaying);\r\n *   });\r\n *\r\n *   return <VideoView player={player} />;\r\n * }\r\n * ```\r\n */\r\nexport function useEventListener<\r\n  TEventsMap extends Record<string, AnyEventListener>,\r\n  TEventName extends InferEventName<TEventsMap>,\r\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\r\n>(eventEmitter: EventEmitter<TEventsMap>, eventName: TEventName, listener: TEventListener): void {\r\n  // Always use the most recent version of the listener inside the effect,\r\n  // without memoization so the listeners don't have to be swapped with every render.\r\n  const listenerRef = useRef<TEventListener>(listener);\r\n  listenerRef.current = listener;\r\n\r\n  useEffect(() => {\r\n    const callback = (...args) => listenerRef.current(...args);\r\n    const subscription = eventEmitter.addListener<TEventName>(\r\n      eventName,\r\n      callback as TEventsMap[TEventName]\r\n    );\r\n\r\n    return () => subscription.remove();\r\n  }, [eventEmitter, eventName, listenerRef]);\r\n}\r\n"],"mappings":"AACA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAiDnD,OAAO,SAASC,QAAQA,CAMtBC,YAAsC,EACtCC,SAAqB,EACrBC,YAAkC,GAAG,IAAI,EACW;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAChCI,YACF,CAAC;EACD,MAAMG,QAAQ,GAAIF,KAAoC,IAAKC,QAAQ,CAACD,KAAK,CAAC;EAE1EG,gBAAgB,CAACN,YAAY,EAAEC,SAAS,EAAEI,QAAsD,CAAC;EAEjG,OAAOF,KAAK;AACd;AAwBA,OAAO,SAASG,gBAAgBA,CAI9BN,YAAsC,EAAEC,SAAqB,EAAEI,QAAwB,EAAQ;EAG/F,MAAME,WAAW,GAAGV,MAAM,CAAiBQ,QAAQ,CAAC;EACpDE,WAAW,CAACC,OAAO,GAAGH,QAAQ;EAE9BT,SAAS,CAAC,MAAM;IACd,MAAMa,QAAQ,GAAGA,CAAC,GAAGC,IAAI,KAAKH,WAAW,CAACC,OAAO,CAAC,GAAGE,IAAI,CAAC;IAC1D,MAAMC,YAAY,GAAGX,YAAY,CAACY,WAAW,CAC3CX,SAAS,EACTQ,QACF,CAAC;IAED,OAAO,MAAME,YAAY,CAACE,MAAM,CAAC,CAAC;EACpC,CAAC,EAAE,CAACb,YAAY,EAAEC,SAAS,EAAEM,WAAW,CAAC,CAAC;AAC5C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}